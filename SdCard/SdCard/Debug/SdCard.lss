
SdCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000148e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  0000148e  00001522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000024d  008000f2  008000f2  000015b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b98  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000902  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000caa  00000000  00000000  00004c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000660  00000000  00000000  000058d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000946  00000000  00000000  00005f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024e5  00000000  00000000  00006876  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00008d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_1>
       8:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <main>
      8a:	0c 94 45 0a 	jmp	0x148a	; 0x148a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getFirstSector>:
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	a0 91 14 03 	lds	r26, 0x0314
      SD_readSingleBlock(sector);
      9e:	b0 91 15 03 	lds	r27, 0x0315
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
      a2:	c0 90 fc 00 	lds	r12, 0x00FC
      a6:	d0 90 fd 00 	lds	r13, 0x00FD
      aa:	e0 90 fe 00 	lds	r14, 0x00FE
      ae:	f0 90 ff 00 	lds	r15, 0x00FF
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      b2:	9b 01       	movw	r18, r22
      {
       	 value = (unsigned long *) &buffer[i*4];
      b4:	ac 01       	movw	r20, r24
      b6:	22 50       	subi	r18, 0x02	; 2
      b8:	31 09       	sbc	r19, r1
      ba:	41 09       	sbc	r20, r1
      bc:	51 09       	sbc	r21, r1
      be:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__muluhisi3>
         if(((*value) & 0x0fffffff) == 0)
      c2:	6c 0d       	add	r22, r12
      c4:	7d 1d       	adc	r23, r13
      c6:	8e 1d       	adc	r24, r14
      c8:	9f 1d       	adc	r25, r15
      ca:	ff 90       	pop	r15
      cc:	ef 90       	pop	r14
      ce:	df 90       	pop	r13
      d0:	cf 90       	pop	r12
      d2:	08 95       	ret

000000d4 <getSetNextCluster>:
      d4:	4f 92       	push	r4
      d6:	5f 92       	push	r5
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      d8:	6f 92       	push	r6
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      da:	7f 92       	push	r7
      dc:	8f 92       	push	r8
      de:	9f 92       	push	r9
      e0:	af 92       	push	r10
      e2:	bf 92       	push	r11
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	c4 2f       	mov	r28, r20
      f6:	28 01       	movw	r4, r16
      f8:	39 01       	movw	r6, r18
      fa:	40 91 33 03 	lds	r20, 0x0333
      fe:	50 91 34 03 	lds	r21, 0x0334
     102:	4b 01       	movw	r8, r22
     104:	5c 01       	movw	r10, r24
     106:	88 0c       	add	r8, r8
     108:	99 1c       	adc	r9, r9
     10a:	aa 1c       	adc	r10, r10
     10c:	bb 1c       	adc	r11, r11
     10e:	88 0c       	add	r8, r8
     110:	99 1c       	adc	r9, r9
     112:	aa 1c       	adc	r10, r10
     114:	bb 1c       	adc	r11, r11
     116:	20 91 04 01 	lds	r18, 0x0104
     11a:	30 91 05 01 	lds	r19, 0x0105
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     11e:	c0 90 2a 03 	lds	r12, 0x032A
     122:	d0 90 2b 03 	lds	r13, 0x032B
     126:	e0 90 2c 03 	lds	r14, 0x032C
}
     12a:	f0 90 2d 03 	lds	r15, 0x032D
     12e:	c4 0e       	add	r12, r20
     130:	d5 1e       	adc	r13, r21
     132:	e1 1c       	adc	r14, r1
     134:	f1 1c       	adc	r15, r1
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	c5 01       	movw	r24, r10
     13c:	b4 01       	movw	r22, r8
     13e:	0e 94 09 0a 	call	0x1412	; 0x1412 <__udivmodsi4>
     142:	c2 0e       	add	r12, r18
     144:	d3 1e       	adc	r13, r19
     146:	e4 1e       	adc	r14, r20
     148:	f5 1e       	adc	r15, r21

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     14a:	20 91 04 01 	lds	r18, 0x0104
     14e:	30 91 05 01 	lds	r19, 0x0105
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	c5 01       	movw	r24, r10
     158:	b4 01       	movw	r22, r8
     15a:	0e 94 09 0a 	call	0x1412	; 0x1412 <__udivmodsi4>
     15e:	4b 01       	movw	r8, r22
     160:	5c 01       	movw	r10, r24
     162:	da e0       	ldi	r29, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     164:	c7 01       	movw	r24, r14
     166:	b6 01       	movw	r22, r12
     168:	0e 94 81 09 	call	0x1302	; 0x1302 <SD_readSingleBlock>
     16c:	88 23       	and	r24, r24
     16e:	11 f0       	breq	.+4      	; 0x174 <getSetNextCluster+0xa0>
     170:	d1 50       	subi	r29, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     172:	c1 f7       	brne	.-16     	; 0x164 <getSetNextCluster+0x90>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     174:	f4 01       	movw	r30, r8
     176:	ec 5e       	subi	r30, 0xEC	; 236
     178:	fe 4f       	sbci	r31, 0xFE	; 254

if(get_set == GET)
     17a:	c1 11       	cpse	r28, r1
     17c:	08 c0       	rjmp	.+16     	; 0x18e <getSetNextCluster+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
     17e:	80 81       	ld	r24, Z
     180:	91 81       	ldd	r25, Z+1	; 0x01
     182:	a2 81       	ldd	r26, Z+2	; 0x02
     184:	b3 81       	ldd	r27, Z+3	; 0x03
     186:	bc 01       	movw	r22, r24
     188:	cd 01       	movw	r24, r26
     18a:	9f 70       	andi	r25, 0x0F	; 15
     18c:	0b c0       	rjmp	.+22     	; 0x1a4 <getSetNextCluster+0xd0>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     18e:	40 82       	st	Z, r4
     190:	51 82       	std	Z+1, r5	; 0x01
     192:	62 82       	std	Z+2, r6	; 0x02
     194:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     196:	c7 01       	movw	r24, r14
     198:	b6 01       	movw	r22, r12
     19a:	0e 94 b0 09 	call	0x1360	; 0x1360 <SD_writeSingleBlock>

return (0);
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	cb 01       	movw	r24, r22
}
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	ff 90       	pop	r15
     1ae:	ef 90       	pop	r14
     1b0:	df 90       	pop	r13
     1b2:	cf 90       	pop	r12
     1b4:	bf 90       	pop	r11
     1b6:	af 90       	pop	r10
     1b8:	9f 90       	pop	r9
     1ba:	8f 90       	pop	r8
     1bc:	7f 90       	pop	r7
     1be:	6f 90       	pop	r6
     1c0:	5f 90       	pop	r5
     1c2:	4f 90       	pop	r4
     1c4:	08 95       	ret

000001c6 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	d8 2f       	mov	r29, r24
     1d4:	c6 2f       	mov	r28, r22
     1d6:	69 01       	movw	r12, r18
     1d8:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     1da:	80 91 2a 03 	lds	r24, 0x032A
     1de:	90 91 2b 03 	lds	r25, 0x032B
     1e2:	a0 91 2c 03 	lds	r26, 0x032C
     1e6:	b0 91 2d 03 	lds	r27, 0x032D
     1ea:	bc 01       	movw	r22, r24
     1ec:	cd 01       	movw	r24, r26
     1ee:	6f 5f       	subi	r22, 0xFF	; 255
     1f0:	7f 4f       	sbci	r23, 0xFF	; 255
     1f2:	8f 4f       	sbci	r24, 0xFF	; 255
     1f4:	9f 4f       	sbci	r25, 0xFF	; 255
     1f6:	0e 94 81 09 	call	0x1302	; 0x1302 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     1fa:	40 91 14 01 	lds	r20, 0x0114
     1fe:	50 91 15 01 	lds	r21, 0x0115
     202:	60 91 16 01 	lds	r22, 0x0116
     206:	70 91 17 01 	lds	r23, 0x0117
     20a:	42 35       	cpi	r20, 0x52	; 82
     20c:	52 45       	sbci	r21, 0x52	; 82
     20e:	61 46       	sbci	r22, 0x61	; 97
     210:	71 44       	sbci	r23, 0x41	; 65
     212:	09 f0       	breq	.+2      	; 0x216 <getSetFreeCluster+0x50>
     214:	59 c0       	rjmp	.+178    	; 0x2c8 <getSetFreeCluster+0x102>
     216:	40 91 f8 02 	lds	r20, 0x02F8
     21a:	50 91 f9 02 	lds	r21, 0x02F9
     21e:	60 91 fa 02 	lds	r22, 0x02FA
     222:	70 91 fb 02 	lds	r23, 0x02FB
     226:	42 37       	cpi	r20, 0x72	; 114
     228:	52 47       	sbci	r21, 0x72	; 114
     22a:	61 44       	sbci	r22, 0x41	; 65
     22c:	71 46       	sbci	r23, 0x61	; 97
     22e:	09 f0       	breq	.+2      	; 0x232 <getSetFreeCluster+0x6c>
     230:	4f c0       	rjmp	.+158    	; 0x2d0 <getSetFreeCluster+0x10a>
     232:	40 91 10 03 	lds	r20, 0x0310
     236:	50 91 11 03 	lds	r21, 0x0311
     23a:	60 91 12 03 	lds	r22, 0x0312
     23e:	70 91 13 03 	lds	r23, 0x0313
     242:	41 15       	cp	r20, r1
     244:	51 05       	cpc	r21, r1
     246:	65 45       	sbci	r22, 0x55	; 85
     248:	7a 4a       	sbci	r23, 0xAA	; 170
     24a:	09 f0       	breq	.+2      	; 0x24e <getSetFreeCluster+0x88>
     24c:	45 c0       	rjmp	.+138    	; 0x2d8 <getSetFreeCluster+0x112>
  return 0xffffffff;

 if(get_set == GET)
     24e:	c1 11       	cpse	r28, r1
     250:	14 c0       	rjmp	.+40     	; 0x27a <getSetFreeCluster+0xb4>
 {
   if(totOrNext == TOTAL_FREE)
     252:	d1 30       	cpi	r29, 0x01	; 1
     254:	49 f4       	brne	.+18     	; 0x268 <getSetFreeCluster+0xa2>
      return(FS->freeClusterCount);
     256:	60 91 fc 02 	lds	r22, 0x02FC
     25a:	70 91 fd 02 	lds	r23, 0x02FD
     25e:	80 91 fe 02 	lds	r24, 0x02FE
     262:	90 91 ff 02 	lds	r25, 0x02FF
     266:	3b c0       	rjmp	.+118    	; 0x2de <getSetFreeCluster+0x118>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     268:	60 91 00 03 	lds	r22, 0x0300
     26c:	70 91 01 03 	lds	r23, 0x0301
     270:	80 91 02 03 	lds	r24, 0x0302
     274:	90 91 03 03 	lds	r25, 0x0303
     278:	32 c0       	rjmp	.+100    	; 0x2de <getSetFreeCluster+0x118>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     27a:	d1 30       	cpi	r29, 0x01	; 1
     27c:	49 f4       	brne	.+18     	; 0x290 <getSetFreeCluster+0xca>
      FS->freeClusterCount = FSEntry;
     27e:	c0 92 fc 02 	sts	0x02FC, r12
     282:	d0 92 fd 02 	sts	0x02FD, r13
     286:	e0 92 fe 02 	sts	0x02FE, r14
     28a:	f0 92 ff 02 	sts	0x02FF, r15
     28e:	08 c0       	rjmp	.+16     	; 0x2a0 <getSetFreeCluster+0xda>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     290:	c0 92 00 03 	sts	0x0300, r12
     294:	d0 92 01 03 	sts	0x0301, r13
     298:	e0 92 02 03 	sts	0x0302, r14
     29c:	f0 92 03 03 	sts	0x0303, r15
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     2a0:	80 91 2a 03 	lds	r24, 0x032A
     2a4:	90 91 2b 03 	lds	r25, 0x032B
     2a8:	a0 91 2c 03 	lds	r26, 0x032C
     2ac:	b0 91 2d 03 	lds	r27, 0x032D
     2b0:	bc 01       	movw	r22, r24
     2b2:	cd 01       	movw	r24, r26
     2b4:	6f 5f       	subi	r22, 0xFF	; 255
     2b6:	7f 4f       	sbci	r23, 0xFF	; 255
     2b8:	8f 4f       	sbci	r24, 0xFF	; 255
     2ba:	9f 4f       	sbci	r25, 0xFF	; 255
     2bc:	0e 94 b0 09 	call	0x1360	; 0x1360 <SD_writeSingleBlock>
 }
 return 0xffffffff;
     2c0:	6f ef       	ldi	r22, 0xFF	; 255
     2c2:	7f ef       	ldi	r23, 0xFF	; 255
     2c4:	cb 01       	movw	r24, r22
     2c6:	0b c0       	rjmp	.+22     	; 0x2de <getSetFreeCluster+0x118>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     2c8:	6f ef       	ldi	r22, 0xFF	; 255
     2ca:	7f ef       	ldi	r23, 0xFF	; 255
     2cc:	cb 01       	movw	r24, r22
     2ce:	07 c0       	rjmp	.+14     	; 0x2de <getSetFreeCluster+0x118>
     2d0:	6f ef       	ldi	r22, 0xFF	; 255
     2d2:	7f ef       	ldi	r23, 0xFF	; 255
     2d4:	cb 01       	movw	r24, r22
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <getSetFreeCluster+0x118>
     2d8:	6f ef       	ldi	r22, 0xFF	; 255
     2da:	7f ef       	ldi	r23, 0xFF	; 255
     2dc:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	08 95       	ret

000002ec <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     2fc:	10 92 2a 03 	sts	0x032A, r1
     300:	10 92 2b 03 	sts	0x032B, r1
     304:	10 92 2c 03 	sts	0x032C, r1
     308:	10 92 2d 03 	sts	0x032D, r1

SD_readSingleBlock(0);
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	cb 01       	movw	r24, r22
     312:	0e 94 81 09 	call	0x1302	; 0x1302 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     316:	80 91 14 01 	lds	r24, 0x0114
     31a:	8d 7f       	andi	r24, 0xFD	; 253
     31c:	89 3e       	cpi	r24, 0xE9	; 233
     31e:	01 f1       	breq	.+64     	; 0x360 <getBootSectorData+0x74>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     320:	80 91 12 03 	lds	r24, 0x0312
     324:	90 91 13 03 	lds	r25, 0x0313
     328:	85 35       	cpi	r24, 0x55	; 85
     32a:	9a 4a       	sbci	r25, 0xAA	; 170
     32c:	09 f0       	breq	.+2      	; 0x330 <getBootSectorData+0x44>
     32e:	aa c0       	rjmp	.+340    	; 0x484 <getBootSectorData+0x198>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     330:	60 91 da 02 	lds	r22, 0x02DA
     334:	70 91 db 02 	lds	r23, 0x02DB
     338:	80 91 dc 02 	lds	r24, 0x02DC
     33c:	90 91 dd 02 	lds	r25, 0x02DD
     340:	60 93 2a 03 	sts	0x032A, r22
     344:	70 93 2b 03 	sts	0x032B, r23
     348:	80 93 2c 03 	sts	0x032C, r24
     34c:	90 93 2d 03 	sts	0x032D, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     350:	0e 94 81 09 	call	0x1302	; 0x1302 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     354:	80 91 14 01 	lds	r24, 0x0114
     358:	8d 7f       	andi	r24, 0xFD	; 253
     35a:	89 3e       	cpi	r24, 0xE9	; 233
     35c:	09 f0       	breq	.+2      	; 0x360 <getBootSectorData+0x74>
     35e:	94 c0       	rjmp	.+296    	; 0x488 <getBootSectorData+0x19c>
}

bytesPerSector = bpb->bytesPerSector;
     360:	80 91 1f 01 	lds	r24, 0x011F
     364:	90 91 20 01 	lds	r25, 0x0120
     368:	90 93 05 01 	sts	0x0105, r25
     36c:	80 93 04 01 	sts	0x0104, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     370:	80 91 21 01 	lds	r24, 0x0121
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	90 93 15 03 	sts	0x0315, r25
     37a:	80 93 14 03 	sts	0x0314, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     37e:	e0 91 22 01 	lds	r30, 0x0122
     382:	f0 91 23 01 	lds	r31, 0x0123
     386:	f0 93 34 03 	sts	0x0334, r31
     38a:	e0 93 33 03 	sts	0x0333, r30
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     38e:	80 91 40 01 	lds	r24, 0x0140
     392:	90 91 41 01 	lds	r25, 0x0141
     396:	a0 91 42 01 	lds	r26, 0x0142
     39a:	b0 91 43 01 	lds	r27, 0x0143
     39e:	80 93 0a 01 	sts	0x010A, r24
     3a2:	90 93 0b 01 	sts	0x010B, r25
     3a6:	a0 93 0c 01 	sts	0x010C, r26
     3aa:	b0 93 0d 01 	sts	0x010D, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     3ae:	c0 91 33 03 	lds	r28, 0x0333
     3b2:	d0 91 34 03 	lds	r29, 0x0334
     3b6:	a0 91 24 01 	lds	r26, 0x0124
     3ba:	20 91 38 01 	lds	r18, 0x0138
     3be:	30 91 39 01 	lds	r19, 0x0139
     3c2:	40 91 3a 01 	lds	r20, 0x013A
     3c6:	50 91 3b 01 	lds	r21, 0x013B
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__muluhisi3>
     3d0:	00 91 30 01 	lds	r16, 0x0130
     3d4:	10 91 31 01 	lds	r17, 0x0131
     3d8:	20 91 32 01 	lds	r18, 0x0132
     3dc:	30 91 33 01 	lds	r19, 0x0133
     3e0:	0c 0f       	add	r16, r28
     3e2:	1d 1f       	adc	r17, r29
     3e4:	21 1d       	adc	r18, r1
     3e6:	31 1d       	adc	r19, r1
     3e8:	06 0f       	add	r16, r22
     3ea:	17 1f       	adc	r17, r23
     3ec:	28 1f       	adc	r18, r24
     3ee:	39 1f       	adc	r19, r25
     3f0:	00 93 fc 00 	sts	0x00FC, r16
     3f4:	10 93 fd 00 	sts	0x00FD, r17
     3f8:	20 93 fe 00 	sts	0x00FE, r18
     3fc:	30 93 ff 00 	sts	0x00FF, r19

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     400:	40 91 14 03 	lds	r20, 0x0314
     404:	50 91 15 03 	lds	r21, 0x0315
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     408:	00 91 34 01 	lds	r16, 0x0134
     40c:	10 91 35 01 	lds	r17, 0x0135
     410:	20 91 36 01 	lds	r18, 0x0136
     414:	30 91 37 01 	lds	r19, 0x0137
     418:	0e 1b       	sub	r16, r30
     41a:	1f 0b       	sbc	r17, r31
     41c:	21 09       	sbc	r18, r1
     41e:	31 09       	sbc	r19, r1
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     420:	68 01       	movw	r12, r16
     422:	79 01       	movw	r14, r18
     424:	c6 1a       	sub	r12, r22
     426:	d7 0a       	sbc	r13, r23
     428:	e8 0a       	sbc	r14, r24
     42a:	f9 0a       	sbc	r15, r25
     42c:	c7 01       	movw	r24, r14
     42e:	b6 01       	movw	r22, r12
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     430:	9a 01       	movw	r18, r20
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	0e 94 09 0a 	call	0x1412	; 0x1412 <__udivmodsi4>
     43a:	20 93 06 01 	sts	0x0106, r18
     43e:	30 93 07 01 	sts	0x0107, r19
     442:	40 93 08 01 	sts	0x0108, r20
     446:	50 93 09 01 	sts	0x0109, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	a9 01       	movw	r20, r18
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <getSetFreeCluster>
     458:	00 91 06 01 	lds	r16, 0x0106
     45c:	10 91 07 01 	lds	r17, 0x0107
     460:	20 91 08 01 	lds	r18, 0x0108
     464:	30 91 09 01 	lds	r19, 0x0109
     468:	06 17       	cp	r16, r22
     46a:	17 07       	cpc	r17, r23
     46c:	28 07       	cpc	r18, r24
     46e:	39 07       	cpc	r19, r25
     470:	20 f4       	brcc	.+8      	; 0x47a <getBootSectorData+0x18e>
     freeClusterCountUpdated = 0;
     472:	10 92 3a 03 	sts	0x033A, r1
else
	 freeClusterCountUpdated = 1;
return 0;
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	08 c0       	rjmp	.+16     	; 0x48a <getBootSectorData+0x19e>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 3a 03 	sts	0x033A, r24
return 0;
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	03 c0       	rjmp	.+6      	; 0x48a <getBootSectorData+0x19e>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	01 c0       	rjmp	.+2      	; 0x48a <getBootSectorData+0x19e>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     488:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	df 90       	pop	r13
     498:	cf 90       	pop	r12
     49a:	08 95       	ret

0000049c <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	2b 97       	sbiw	r28, 0x0b	; 11
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 81       	ld	r18, Z
     4b4:	2e 32       	cpi	r18, 0x2E	; 46
     4b6:	79 f0       	breq	.+30     	; 0x4d6 <convertFileName+0x3a>
     4b8:	31 96       	adiw	r30, 0x01	; 1
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     4ba:	21 e0       	ldi	r18, 0x01	; 1
if(fileName[j] == '.') break;
     4bc:	31 91       	ld	r19, Z+
     4be:	3e 32       	cpi	r19, 0x2E	; 46
     4c0:	21 f0       	breq	.+8      	; 0x4ca <convertFileName+0x2e>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     4c2:	2f 5f       	subi	r18, 0xFF	; 255
     4c4:	2c 30       	cpi	r18, 0x0C	; 12
     4c6:	d1 f7       	brne	.-12     	; 0x4bc <convertFileName+0x20>
     4c8:	61 c0       	rjmp	.+194    	; 0x58c <convertFileName+0xf0>
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
     4ca:	29 30       	cpi	r18, 0x09	; 9
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <convertFileName+0x34>
     4ce:	60 c0       	rjmp	.+192    	; 0x590 <convertFileName+0xf4>
	return 1;}

for(k=0; k<j; k++) //setting file name
     4d0:	21 11       	cpse	r18, r1
     4d2:	05 c0       	rjmp	.+10     	; 0x4de <convertFileName+0x42>
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <convertFileName+0x3c>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     4d6:	20 e0       	ldi	r18, 0x00	; 0
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
     4d8:	32 2f       	mov	r19, r18
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     4da:	40 e2       	ldi	r20, 0x20	; 32
     4dc:	0e c0       	rjmp	.+28     	; 0x4fa <convertFileName+0x5e>
     4de:	48 2f       	mov	r20, r24
     4e0:	de 01       	movw	r26, r28
     4e2:	11 96       	adiw	r26, 0x01	; 1
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
     4e4:	e8 2f       	mov	r30, r24
     4e6:	f9 2f       	mov	r31, r25
  fileNameFAT[k] = fileName[k];
     4e8:	31 91       	ld	r19, Z+
     4ea:	3d 93       	st	X+, r19
     4ec:	3e 2f       	mov	r19, r30
     4ee:	34 1b       	sub	r19, r20
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}

for(k=0; k<j; k++) //setting file name
     4f0:	32 17       	cp	r19, r18
     4f2:	d0 f3       	brcs	.-12     	; 0x4e8 <convertFileName+0x4c>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     4f4:	28 30       	cpi	r18, 0x08	; 8
     4f6:	80 f3       	brcs	.-32     	; 0x4d8 <convertFileName+0x3c>
     4f8:	0a c0       	rjmp	.+20     	; 0x50e <convertFileName+0x72>
  fileNameFAT[k] = ' ';
     4fa:	e1 e0       	ldi	r30, 0x01	; 1
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	ec 0f       	add	r30, r28
     500:	fd 1f       	adc	r31, r29
     502:	e3 0f       	add	r30, r19
     504:	f1 1d       	adc	r31, r1
     506:	40 83       	st	Z, r20
	return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     508:	3f 5f       	subi	r19, 0xFF	; 255
     50a:	38 30       	cpi	r19, 0x08	; 8
     50c:	b0 f3       	brcs	.-20     	; 0x4fa <convertFileName+0x5e>
  fileNameFAT[k] = ' ';

j++;
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	42 0f       	add	r20, r18
for(k=8; k<11; k++) //setting file extention
     512:	28 e0       	ldi	r18, 0x08	; 8
{
  if(fileName[j] != 0)
     514:	fc 01       	movw	r30, r24
     516:	e4 0f       	add	r30, r20
     518:	f1 1d       	adc	r31, r1
     51a:	30 81       	ld	r19, Z
     51c:	31 11       	cpse	r19, r1
     51e:	03 c0       	rjmp	.+6      	; 0x526 <convertFileName+0x8a>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     520:	2b 30       	cpi	r18, 0x0B	; 11
     522:	50 f0       	brcs	.+20     	; 0x538 <convertFileName+0x9c>
     524:	17 c0       	rjmp	.+46     	; 0x554 <convertFileName+0xb8>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	e1 e0       	ldi	r30, 0x01	; 1
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	ec 0f       	add	r30, r28
     52e:	fd 1f       	adc	r31, r29
     530:	e2 0f       	add	r30, r18
     532:	f1 1d       	adc	r31, r1
     534:	30 83       	st	Z, r19
     536:	0e c0       	rjmp	.+28     	; 0x554 <convertFileName+0xb8>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	31 e0       	ldi	r19, 0x01	; 1
     53c:	32 0f       	add	r19, r18
     53e:	e1 e0       	ldi	r30, 0x01	; 1
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	ec 0f       	add	r30, r28
     544:	fd 1f       	adc	r31, r29
     546:	e2 0f       	add	r30, r18
     548:	f1 1d       	adc	r31, r1
     54a:	40 83       	st	Z, r20
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     54c:	3b 30       	cpi	r19, 0x0B	; 11
     54e:	29 f0       	breq	.+10     	; 0x55a <convertFileName+0xbe>
      fileNameFAT[k++] = ' ';
     550:	23 2f       	mov	r18, r19
     552:	f3 cf       	rjmp	.-26     	; 0x53a <convertFileName+0x9e>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     554:	2f 5f       	subi	r18, 0xFF	; 255
     556:	2b 30       	cpi	r18, 0x0B	; 11
     558:	e8 f2       	brcs	.-70     	; 0x514 <convertFileName+0x78>
     55a:	9e 01       	movw	r18, r28
     55c:	24 5f       	subi	r18, 0xF4	; 244
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     560:	fe 01       	movw	r30, r28
     562:	31 96       	adiw	r30, 0x01	; 1
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     564:	40 81       	ld	r20, Z
     566:	5f e9       	ldi	r21, 0x9F	; 159
     568:	54 0f       	add	r21, r20
     56a:	5a 31       	cpi	r21, 0x1A	; 26
     56c:	10 f4       	brcc	.+4      	; 0x572 <convertFileName+0xd6>
    fileNameFAT[j] -= 0x20;
     56e:	40 52       	subi	r20, 0x20	; 32
     570:	40 83       	st	Z, r20
     572:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     574:	e2 17       	cp	r30, r18
     576:	f3 07       	cpc	r31, r19
     578:	a9 f7       	brne	.-22     	; 0x564 <convertFileName+0xc8>
     57a:	dc 01       	movw	r26, r24
     57c:	fe 01       	movw	r30, r28
     57e:	31 96       	adiw	r30, 0x01	; 1
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     580:	81 91       	ld	r24, Z+
     582:	8d 93       	st	X+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     584:	2e 17       	cp	r18, r30
     586:	3f 07       	cpc	r19, r31
     588:	d9 f7       	brne	.-10     	; 0x580 <convertFileName+0xe4>
     58a:	04 c0       	rjmp	.+8      	; 0x594 <convertFileName+0xf8>

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {//transmitString_F(PSTR("Invalid fileName..")); 
	return 1;}
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	03 c0       	rjmp	.+6      	; 0x596 <convertFileName+0xfa>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	01 c0       	rjmp	.+2      	; 0x596 <convertFileName+0xfa>
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
     594:	80 e0       	ldi	r24, 0x00	; 0
}
     596:	2b 96       	adiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	cf 93       	push	r28
     5b2:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     5b4:	6a 01       	movw	r12, r20
     5b6:	7b 01       	movw	r14, r22
     5b8:	21 e0       	ldi	r18, 0x01	; 1
     5ba:	d2 22       	and	r13, r18
     5bc:	ee 24       	eor	r14, r14
     5be:	ff 24       	eor	r15, r15
     5c0:	cd 28       	or	r12, r13
     5c2:	ce 28       	or	r12, r14
     5c4:	cf 28       	or	r12, r15
     5c6:	61 f4       	brne	.+24     	; 0x5e0 <freeMemoryUpdate+0x38>
     5c8:	db 01       	movw	r26, r22
     5ca:	ca 01       	movw	r24, r20
     5cc:	07 2e       	mov	r0, r23
     5ce:	79 e0       	ldi	r23, 0x09	; 9
     5d0:	b6 95       	lsr	r27
     5d2:	a7 95       	ror	r26
     5d4:	97 95       	ror	r25
     5d6:	87 95       	ror	r24
     5d8:	7a 95       	dec	r23
     5da:	d1 f7       	brne	.-12     	; 0x5d0 <freeMemoryUpdate+0x28>
     5dc:	70 2d       	mov	r23, r0
     5de:	0e c0       	rjmp	.+28     	; 0x5fc <freeMemoryUpdate+0x54>
  else size = (size / 512) +1;
     5e0:	db 01       	movw	r26, r22
     5e2:	ca 01       	movw	r24, r20
     5e4:	07 2e       	mov	r0, r23
     5e6:	79 e0       	ldi	r23, 0x09	; 9
     5e8:	b6 95       	lsr	r27
     5ea:	a7 95       	ror	r26
     5ec:	97 95       	ror	r25
     5ee:	87 95       	ror	r24
     5f0:	7a 95       	dec	r23
     5f2:	d1 f7       	brne	.-12     	; 0x5e8 <freeMemoryUpdate+0x40>
     5f4:	70 2d       	mov	r23, r0
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	a1 1d       	adc	r26, r1
     5fa:	b1 1d       	adc	r27, r1
  if((size % 8) == 0) size = size / 8;
     5fc:	6c 01       	movw	r12, r24
     5fe:	7d 01       	movw	r14, r26
     600:	27 e0       	ldi	r18, 0x07	; 7
     602:	c2 22       	and	r12, r18
     604:	dd 24       	eor	r13, r13
     606:	ee 24       	eor	r14, r14
     608:	ff 24       	eor	r15, r15
     60a:	cd 28       	or	r12, r13
     60c:	ce 28       	or	r12, r14
     60e:	cf 28       	or	r12, r15
     610:	59 f4       	brne	.+22     	; 0x628 <freeMemoryUpdate+0x80>
     612:	6c 01       	movw	r12, r24
     614:	7d 01       	movw	r14, r26
     616:	68 94       	set
     618:	12 f8       	bld	r1, 2
     61a:	f6 94       	lsr	r15
     61c:	e7 94       	ror	r14
     61e:	d7 94       	ror	r13
     620:	c7 94       	ror	r12
     622:	16 94       	lsr	r1
     624:	d1 f7       	brne	.-12     	; 0x61a <freeMemoryUpdate+0x72>
     626:	0f c0       	rjmp	.+30     	; 0x646 <freeMemoryUpdate+0x9e>
  else size = (size / 8) +1;
     628:	6c 01       	movw	r12, r24
     62a:	7d 01       	movw	r14, r26
     62c:	68 94       	set
     62e:	12 f8       	bld	r1, 2
     630:	f6 94       	lsr	r15
     632:	e7 94       	ror	r14
     634:	d7 94       	ror	r13
     636:	c7 94       	ror	r12
     638:	16 94       	lsr	r1
     63a:	d1 f7       	brne	.-12     	; 0x630 <freeMemoryUpdate+0x88>
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	c8 1a       	sub	r12, r24
     640:	d8 0a       	sbc	r13, r24
     642:	e8 0a       	sbc	r14, r24
     644:	f8 0a       	sbc	r15, r24

  if(freeClusterCountUpdated)
     646:	90 91 3a 03 	lds	r25, 0x033A
     64a:	99 23       	and	r25, r25
     64c:	d1 f0       	breq	.+52     	; 0x682 <freeMemoryUpdate+0xda>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	a9 01       	movw	r20, r18
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <getSetFreeCluster>
	if(flag == ADD)
     65c:	c1 11       	cpse	r28, r1
     65e:	07 c0       	rjmp	.+14     	; 0x66e <freeMemoryUpdate+0xc6>
  	   freeClusters = freeClusters + size;
     660:	9b 01       	movw	r18, r22
     662:	ac 01       	movw	r20, r24
     664:	2c 0d       	add	r18, r12
     666:	3d 1d       	adc	r19, r13
     668:	4e 1d       	adc	r20, r14
     66a:	5f 1d       	adc	r21, r15
     66c:	06 c0       	rjmp	.+12     	; 0x67a <freeMemoryUpdate+0xd2>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     66e:	9b 01       	movw	r18, r22
     670:	ac 01       	movw	r20, r24
     672:	2c 19       	sub	r18, r12
     674:	3d 09       	sbc	r19, r13
     676:	4e 09       	sbc	r20, r14
     678:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <getSetFreeCluster>
  }
}
     682:	cf 91       	pop	r28
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	08 95       	ret

0000068e <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     68e:	2f 92       	push	r2
     690:	3f 92       	push	r3
     692:	4f 92       	push	r4
     694:	5f 92       	push	r5
     696:	6f 92       	push	r6
     698:	7f 92       	push	r7
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	65 97       	sbiw	r28, 0x15	; 21
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	8f 87       	std	Y+15, r24	; 0x0f
     6c4:	7c 83       	std	Y+4, r23	; 0x04
     6c6:	6b 83       	std	Y+3, r22	; 0x03
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i,a=0;
unsigned char j;

cluster = rootCluster; //root cluster
     6c8:	e0 90 0a 01 	lds	r14, 0x010A
     6cc:	f0 90 0b 01 	lds	r15, 0x010B
     6d0:	00 91 0c 01 	lds	r16, 0x010C
     6d4:	10 91 0d 01 	lds	r17, 0x010D
     6d8:	eb 86       	std	Y+11, r14	; 0x0b
     6da:	fc 86       	std	Y+12, r15	; 0x0c
     6dc:	0d 87       	std	Y+13, r16	; 0x0d
     6de:	1e 87       	std	Y+14, r17	; 0x0e
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i,a=0;
     6e0:	61 2c       	mov	r6, r1
     6e2:	71 2c       	mov	r7, r1
//		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	8a 87       	std	Y+10, r24	; 0x0a
     6e8:	0f 2e       	mov	r0, r31
     6ea:	f4 e1       	ldi	r31, 0x14	; 20
     6ec:	4f 2e       	mov	r4, r31
     6ee:	f1 e0       	ldi	r31, 0x01	; 1
     6f0:	5f 2e       	mov	r5, r31
     6f2:	f0 2d       	mov	r31, r0
     6f4:	0f ef       	ldi	r16, 0xFF	; 255
     6f6:	40 1a       	sub	r4, r16
     6f8:	50 0a       	sbc	r5, r16
		  {
			  if(dir->name[0] == EMPTY){  //end of list
				 Number_Of_Files = a;
			  return 0;
			  }
			  if((dir->attrib != 0x10) && (dir->attrib != 0x08)) //if file
     6fa:	21 2c       	mov	r2, r1
     6fc:	31 2c       	mov	r3, r1
     6fe:	8b 01       	movw	r16, r22
     700:	0f 5f       	subi	r16, 0xFF	; 255
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	59 8a       	std	Y+17, r5	; 0x11
     706:	48 8a       	std	Y+16, r4	; 0x10
     708:	78 01       	movw	r14, r16
     70a:	d2 2c       	mov	r13, r2
     70c:	c3 2c       	mov	r12, r3
     70e:	13 01       	movw	r2, r6

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
     710:	6b 85       	ldd	r22, Y+11	; 0x0b
     712:	7c 85       	ldd	r23, Y+12	; 0x0c
     714:	8d 85       	ldd	r24, Y+13	; 0x0d
     716:	9e 85       	ldd	r25, Y+14	; 0x0e
     718:	0e 94 49 00 	call	0x92	; 0x92 <getFirstSector>
     71c:	4b 01       	movw	r8, r22
     71e:	5c 01       	movw	r10, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
     720:	80 91 14 03 	lds	r24, 0x0314
     724:	90 91 15 03 	lds	r25, 0x0315
     728:	89 2b       	or	r24, r25
     72a:	09 f4       	brne	.+2      	; 0x72e <findFiles+0xa0>
     72c:	3e c1       	rjmp	.+636    	; 0x9aa <__stack+0x14b>
     72e:	41 2c       	mov	r4, r1
     730:	51 2c       	mov	r5, r1
     732:	61 2c       	mov	r6, r1
     734:	71 2c       	mov	r7, r1
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     736:	11 e0       	ldi	r17, 0x01	; 1
     738:	1d 83       	std	Y+5, r17	; 0x05
     73a:	08 89       	ldd	r16, Y+16	; 0x10
     73c:	19 89       	ldd	r17, Y+17	; 0x11
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
     73e:	d3 01       	movw	r26, r6
     740:	c2 01       	movw	r24, r4
     742:	88 0d       	add	r24, r8
     744:	99 1d       	adc	r25, r9
     746:	aa 1d       	adc	r26, r10
     748:	bb 1d       	adc	r27, r11
     74a:	8e 83       	std	Y+6, r24	; 0x06
     74c:	9f 83       	std	Y+7, r25	; 0x07
     74e:	a8 87       	std	Y+8, r26	; 0x08
     750:	b9 87       	std	Y+9, r27	; 0x09
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 81 09 	call	0x1302	; 0x1302 <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
     75a:	80 91 04 01 	lds	r24, 0x0104
     75e:	90 91 05 01 	lds	r25, 0x0105
     762:	89 2b       	or	r24, r25
     764:	09 f4       	brne	.+2      	; 0x768 <findFiles+0xda>
     766:	10 c1       	rjmp	.+544    	; 0x988 <__stack+0x129>
     768:	e4 e1       	ldi	r30, 0x14	; 20
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	4a 85       	ldd	r20, Y+10	; 0x0a
     {
	    dir = (struct dir_Structure *) &buffer[i];
     772:	2e 2f       	mov	r18, r30
     774:	9f 2f       	mov	r25, r31

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
     776:	80 81       	ld	r24, Z
     778:	81 11       	cpse	r24, r1
     77a:	03 c0       	rjmp	.+6      	; 0x782 <findFiles+0xf4>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
     77c:	42 30       	cpi	r20, 0x02	; 2
     77e:	20 f4       	brcc	.+8      	; 0x788 <findFiles+0xfa>
     780:	36 c1       	rjmp	.+620    	; 0x9ee <__stack+0x18f>
//		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
     782:	85 3e       	cpi	r24, 0xE5	; 229
     784:	09 f4       	brne	.+2      	; 0x788 <findFiles+0xfa>
     786:	f5 c0       	rjmp	.+490    	; 0x972 <__stack+0x113>
     788:	db 01       	movw	r26, r22
     78a:	ac 5e       	subi	r26, 0xEC	; 236
     78c:	be 4f       	sbci	r27, 0xFE	; 254
     78e:	1b 96       	adiw	r26, 0x0b	; 11
     790:	3c 91       	ld	r19, X
     792:	3f 30       	cpi	r19, 0x0F	; 15
     794:	09 f4       	brne	.+2      	; 0x798 <findFiles+0x10a>
     796:	ed c0       	rjmp	.+474    	; 0x972 <__stack+0x113>
        {
          if((flag == GET_FILE) || (flag == DELETE))
     798:	42 30       	cpi	r20, 0x02	; 2
     79a:	08 f0       	brcs	.+2      	; 0x79e <findFiles+0x110>
     79c:	c0 c0       	rjmp	.+384    	; 0x91e <__stack+0xbf>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
     79e:	ab 81       	ldd	r26, Y+3	; 0x03
     7a0:	bc 81       	ldd	r27, Y+4	; 0x04
     7a2:	3c 91       	ld	r19, X
     7a4:	83 13       	cpse	r24, r19
     7a6:	e5 c0       	rjmp	.+458    	; 0x972 <__stack+0x113>
     7a8:	fb 8a       	std	Y+19, r15	; 0x13
     7aa:	ea 8a       	std	Y+18, r14	; 0x12
     7ac:	d8 01       	movw	r26, r16
     7ae:	a6 0f       	add	r26, r22
     7b0:	b7 1f       	adc	r27, r23
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     7b2:	8d 81       	ldd	r24, Y+5	; 0x05
     7b4:	3a 82       	std	Y+2, r3	; 0x02
     7b6:	29 82       	std	Y+1, r2	; 0x01
     7b8:	fd 8b       	std	Y+21, r31	; 0x15
     7ba:	ec 8b       	std	Y+20, r30	; 0x14
            if(dir->name[j] != fileName[j]) break;
     7bc:	5d 91       	ld	r21, X+
     7be:	ea 89       	ldd	r30, Y+18	; 0x12
     7c0:	fb 89       	ldd	r31, Y+19	; 0x13
     7c2:	31 91       	ld	r19, Z+
     7c4:	fb 8b       	std	Y+19, r31	; 0x13
     7c6:	ea 8b       	std	Y+18, r30	; 0x12
     7c8:	53 13       	cpse	r21, r19
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <findFiles+0x146>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
     7cc:	8f 5f       	subi	r24, 0xFF	; 255
     7ce:	8b 30       	cpi	r24, 0x0B	; 11
     7d0:	a9 f7       	brne	.-22     	; 0x7bc <findFiles+0x12e>
     7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <findFiles+0x15a>
     7d4:	29 80       	ldd	r2, Y+1	; 0x01
     7d6:	3a 80       	ldd	r3, Y+2	; 0x02
     7d8:	ec 89       	ldd	r30, Y+20	; 0x14
     7da:	fd 89       	ldd	r31, Y+21	; 0x15
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
     7dc:	8b 30       	cpi	r24, 0x0B	; 11
     7de:	09 f0       	breq	.+2      	; 0x7e2 <findFiles+0x154>
     7e0:	c8 c0       	rjmp	.+400    	; 0x972 <__stack+0x113>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
     7e2:	62 2e       	mov	r6, r18
     7e4:	79 2e       	mov	r7, r25
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <findFiles+0x15e>
     7e8:	62 2e       	mov	r6, r18
     7ea:	79 2e       	mov	r7, r25
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
     7ec:	ff 85       	ldd	r31, Y+15	; 0x0f
     7ee:	f1 30       	cpi	r31, 0x01	; 1
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <findFiles+0x166>
     7f2:	43 c0       	rjmp	.+134    	; 0x87a <__stack+0x1b>
              {
			    appendFileSector = firstSector + sector;
     7f4:	ee 80       	ldd	r14, Y+6	; 0x06
     7f6:	ff 80       	ldd	r15, Y+7	; 0x07
     7f8:	08 85       	ldd	r16, Y+8	; 0x08
     7fa:	19 85       	ldd	r17, Y+9	; 0x09
     7fc:	e0 92 3b 03 	sts	0x033B, r14
     800:	f0 92 3c 03 	sts	0x033C, r15
     804:	00 93 3d 03 	sts	0x033D, r16
     808:	10 93 3e 03 	sts	0x033E, r17
				appendFileLocation = i;
     80c:	ab 01       	movw	r20, r22
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	40 93 f8 00 	sts	0x00F8, r20
     816:	50 93 f9 00 	sts	0x00F9, r21
     81a:	60 93 fa 00 	sts	0x00FA, r22
     81e:	70 93 fb 00 	sts	0x00FB, r23
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     822:	d3 01       	movw	r26, r6
     824:	54 96       	adiw	r26, 0x14	; 20
     826:	4d 91       	ld	r20, X+
     828:	5c 91       	ld	r21, X
     82a:	55 97       	sbiw	r26, 0x15	; 21
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	ba 01       	movw	r22, r20
     832:	55 27       	eor	r21, r21
     834:	44 27       	eor	r20, r20
     836:	5a 96       	adiw	r26, 0x1a	; 26
     838:	cd 90       	ld	r12, X+
     83a:	dc 90       	ld	r13, X
     83c:	5b 97       	sbiw	r26, 0x1b	; 27
     83e:	e1 2c       	mov	r14, r1
     840:	f1 2c       	mov	r15, r1
     842:	4c 29       	or	r20, r12
     844:	5d 29       	or	r21, r13
     846:	6e 29       	or	r22, r14
     848:	7f 29       	or	r23, r15
     84a:	40 93 35 03 	sts	0x0335, r20
     84e:	50 93 36 03 	sts	0x0336, r21
     852:	60 93 37 03 	sts	0x0337, r22
     856:	70 93 38 03 	sts	0x0338, r23
				fileSize = dir->fileSize;
     85a:	5c 96       	adiw	r26, 0x1c	; 28
     85c:	4d 91       	ld	r20, X+
     85e:	5d 91       	ld	r21, X+
     860:	6d 91       	ld	r22, X+
     862:	7c 91       	ld	r23, X
     864:	5f 97       	sbiw	r26, 0x1f	; 31
     866:	40 93 00 01 	sts	0x0100, r20
     86a:	50 93 01 01 	sts	0x0101, r21
     86e:	60 93 02 01 	sts	0x0102, r22
     872:	70 93 03 01 	sts	0x0103, r23
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
     876:	82 2f       	mov	r24, r18
              {
			    appendFileSector = firstSector + sector;
				appendFileLocation = i;
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
				fileSize = dir->fileSize;
			    return (dir);
     878:	c2 c0       	rjmp	.+388    	; 0x9fe <__stack+0x19f>
			     //TX_NEWLINE;
//				 transmitString_F(PSTR("Deleting.."));
				// LCD_displayString("Deleting..");
				// TX_NEWLINE;
				// TX_NEWLINE;
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     87a:	f3 01       	movw	r30, r6
     87c:	84 88       	ldd	r8, Z+20	; 0x14
     87e:	95 88       	ldd	r9, Z+21	; 0x15
     880:	a1 2c       	mov	r10, r1
     882:	b1 2c       	mov	r11, r1
     884:	54 01       	movw	r10, r8
     886:	99 24       	eor	r9, r9
     888:	88 24       	eor	r8, r8
     88a:	82 8d       	ldd	r24, Z+26	; 0x1a
     88c:	93 8d       	ldd	r25, Z+27	; 0x1b
     88e:	a0 e0       	ldi	r26, 0x00	; 0
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	88 2a       	or	r8, r24
     894:	99 2a       	or	r9, r25
     896:	aa 2a       	or	r10, r26
     898:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
     89a:	85 ee       	ldi	r24, 0xE5	; 229
     89c:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
     89e:	6e 81       	ldd	r22, Y+6	; 0x06
     8a0:	7f 81       	ldd	r23, Y+7	; 0x07
     8a2:	88 85       	ldd	r24, Y+8	; 0x08
     8a4:	99 85       	ldd	r25, Y+9	; 0x09
     8a6:	0e 94 b0 09 	call	0x1360	; 0x1360 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
     8aa:	d3 01       	movw	r26, r6
     8ac:	5c 96       	adiw	r26, 0x1c	; 28
     8ae:	4d 91       	ld	r20, X+
     8b0:	5d 91       	ld	r21, X+
     8b2:	6d 91       	ld	r22, X+
     8b4:	7c 91       	ld	r23, X
     8b6:	5f 97       	sbiw	r26, 0x1f	; 31
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <getSetFreeCluster>
				 if(firstCluster < cluster)
     8cc:	86 16       	cp	r8, r22
     8ce:	97 06       	cpc	r9, r23
     8d0:	a8 06       	cpc	r10, r24
     8d2:	b9 06       	cpc	r11, r25
     8d4:	30 f4       	brcc	.+12     	; 0x8e2 <__stack+0x83>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
     8d6:	a5 01       	movw	r20, r10
     8d8:	94 01       	movw	r18, r8
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
     8e2:	00 e0       	ldi	r16, 0x00	; 0
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	98 01       	movw	r18, r16
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	c5 01       	movw	r24, r10
     8ec:	b4 01       	movw	r22, r8
     8ee:	0e 94 6a 00 	call	0xd4	; 0xd4 <getSetNextCluster>
     8f2:	6b 01       	movw	r12, r22
     8f4:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
     8f6:	00 e0       	ldi	r16, 0x00	; 0
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	98 01       	movw	r18, r16
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	c5 01       	movw	r24, r10
     900:	b4 01       	movw	r22, r8
     902:	0e 94 6a 00 	call	0xd4	; 0xd4 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
     906:	b7 ef       	ldi	r27, 0xF7	; 247
     908:	cb 16       	cp	r12, r27
     90a:	bf ef       	ldi	r27, 0xFF	; 255
     90c:	db 06       	cpc	r13, r27
     90e:	eb 06       	cpc	r14, r27
     910:	bf e0       	ldi	r27, 0x0F	; 15
     912:	fb 06       	cpc	r15, r27
     914:	08 f0       	brcs	.+2      	; 0x918 <__stack+0xb9>
     916:	6e c0       	rjmp	.+220    	; 0x9f4 <__stack+0x195>
					   {//transmitString_F(PSTR("File deleted!"));
						   return 0;}
					firstCluster = nextCluster;
     918:	46 01       	movw	r8, r12
     91a:	57 01       	movw	r10, r14
     91c:	e2 cf       	rjmp	.-60     	; 0x8e2 <__stack+0x83>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
			  if(dir->name[0] == EMPTY){  //end of list
     91e:	81 11       	cpse	r24, r1
     920:	06 c0       	rjmp	.+12     	; 0x92e <__stack+0xcf>
				 Number_Of_Files = a;
     922:	30 92 13 01 	sts	0x0113, r3
     926:	20 92 12 01 	sts	0x0112, r2
			  return 0;
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	68 c0       	rjmp	.+208    	; 0x9fe <__stack+0x19f>
			  }
			  if((dir->attrib != 0x10) && (dir->attrib != 0x08)) //if file
     92e:	30 31       	cpi	r19, 0x10	; 16
     930:	e9 f0       	breq	.+58     	; 0x96c <__stack+0x10d>
     932:	38 30       	cpi	r19, 0x08	; 8
     934:	d9 f0       	breq	.+54     	; 0x96c <__stack+0x10d>
     936:	8d 2d       	mov	r24, r13
     938:	9c 2d       	mov	r25, r12
				// if(j == 8) //transmitByte(' ');
				// transmitByte (dir->name[j]);
				
				
				//LCD_displayCharacter(dir->name[j]);
				files[a][j] = dir->name[j];
     93a:	91 01       	movw	r18, r2
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	2a 5e       	subi	r18, 0xEA	; 234
     942:	3c 4f       	sbci	r19, 0xFC	; 252
     944:	fb 8b       	std	Y+19, r31	; 0x13
     946:	ea 8b       	std	Y+18, r30	; 0x12
     948:	d9 01       	movw	r26, r18
     94a:	9f 01       	movw	r18, r30
     94c:	fd 01       	movw	r30, r26
     94e:	aa 89       	ldd	r26, Y+18	; 0x12
     950:	bb 89       	ldd	r27, Y+19	; 0x13
     952:	5d 91       	ld	r21, X+
     954:	bb 8b       	std	Y+19, r27	; 0x13
     956:	aa 8b       	std	Y+18, r26	; 0x12
     958:	a0 81       	ld	r26, Z
     95a:	b1 81       	ldd	r27, Z+1	; 0x01
     95c:	a8 0f       	add	r26, r24
     95e:	b9 1f       	adc	r27, r25
     960:	5c 93       	st	X, r21
     962:	01 96       	adiw	r24, 0x01	; 1
				 Number_Of_Files = a;
			  return 0;
			  }
			  if((dir->attrib != 0x10) && (dir->attrib != 0x08)) //if file
			  {
			 for(j=0; j<11; j++)
     964:	8b 30       	cpi	r24, 0x0B	; 11
     966:	91 05       	cpc	r25, r1
     968:	91 f7       	brne	.-28     	; 0x94e <__stack+0xef>
     96a:	f9 01       	movw	r30, r18
				
 			
 			// else;
 			// transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
			// LCD_displayString((dir->attrib == 0x10)? "DIR" : "ROOT");
			 ++a; 
     96c:	bf ef       	ldi	r27, 0xFF	; 255
     96e:	2b 1a       	sub	r2, r27
     970:	3b 0a       	sbc	r3, r27
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     972:	60 5e       	subi	r22, 0xE0	; 224
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	80 91 04 01 	lds	r24, 0x0104
     97a:	90 91 05 01 	lds	r25, 0x0105
     97e:	b0 96       	adiw	r30, 0x20	; 32
     980:	68 17       	cp	r22, r24
     982:	79 07       	cpc	r23, r25
     984:	08 f4       	brcc	.+2      	; 0x988 <__stack+0x129>
     986:	f5 ce       	rjmp	.-534    	; 0x772 <findFiles+0xe4>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
     988:	ef ef       	ldi	r30, 0xFF	; 255
     98a:	4e 1a       	sub	r4, r30
     98c:	5e 0a       	sbc	r5, r30
     98e:	6e 0a       	sbc	r6, r30
     990:	7e 0a       	sbc	r7, r30
     992:	80 91 14 03 	lds	r24, 0x0314
     996:	90 91 15 03 	lds	r25, 0x0315
     99a:	a0 e0       	ldi	r26, 0x00	; 0
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	48 16       	cp	r4, r24
     9a0:	59 06       	cpc	r5, r25
     9a2:	6a 06       	cpc	r6, r26
     9a4:	7b 06       	cpc	r7, r27
     9a6:	08 f4       	brcc	.+2      	; 0x9aa <__stack+0x14b>
     9a8:	ca ce       	rjmp	.-620    	; 0x73e <findFiles+0xb0>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
     9aa:	00 e0       	ldi	r16, 0x00	; 0
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	6b 85       	ldd	r22, Y+11	; 0x0b
     9b6:	7c 85       	ldd	r23, Y+12	; 0x0c
     9b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     9bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <getSetNextCluster>
     9c0:	6b 87       	std	Y+11, r22	; 0x0b
     9c2:	7c 87       	std	Y+12, r23	; 0x0c
     9c4:	8d 87       	std	Y+13, r24	; 0x0d
     9c6:	9e 87       	std	Y+14, r25	; 0x0e

   if(cluster > 0x0ffffff6)
     9c8:	67 3f       	cpi	r22, 0xF7	; 247
     9ca:	ff ef       	ldi	r31, 0xFF	; 255
     9cc:	7f 07       	cpc	r23, r31
     9ce:	8f 07       	cpc	r24, r31
     9d0:	ff e0       	ldi	r31, 0x0F	; 15
     9d2:	9f 07       	cpc	r25, r31
     9d4:	90 f4       	brcc	.+36     	; 0x9fa <__stack+0x19b>
   	 return 0;
   if(cluster == 0) 
     9d6:	67 2b       	or	r22, r23
     9d8:	68 2b       	or	r22, r24
     9da:	69 2b       	or	r22, r25
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <__stack+0x181>
     9de:	98 ce       	rjmp	.-720    	; 0x710 <findFiles+0x82>
   {
	   LCD_displayString("error cluster");
     9e0:	82 e6       	ldi	r24, 0x62	; 98
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
	   //transmitString_F(PSTR("Error in getting cluster"));  
	   return 0;}
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	08 c0       	rjmp	.+16     	; 0x9fe <__stack+0x19f>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if((flag == GET_FILE) || (flag == DELETE))
//		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__stack+0x19f>
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {//transmitString_F(PSTR("File deleted!"));
						   return 0;}
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0x19f>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
	   LCD_displayString("error cluster");
	   //transmitString_F(PSTR("Error in getting cluster"));  
	   return 0;}
 }
return 0;
}
     9fe:	65 96       	adiw	r28, 0x15	; 21
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	9f 90       	pop	r9
     a20:	8f 90       	pop	r8
     a22:	7f 90       	pop	r7
     a24:	6f 90       	pop	r6
     a26:	5f 90       	pop	r5
     a28:	4f 90       	pop	r4
     a2a:	3f 90       	pop	r3
     a2c:	2f 90       	pop	r2
     a2e:	08 95       	ret

00000a30 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
     a30:	2f 92       	push	r2
     a32:	3f 92       	push	r3
     a34:	4f 92       	push	r4
     a36:	5f 92       	push	r5
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <readFile+0x26>
     a56:	00 d0       	rcall	.+0      	; 0xa58 <readFile+0x28>
     a58:	1f 92       	push	r1
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	18 2f       	mov	r17, r24
     a60:	7b 01       	movw	r14, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;
error = convertFileName (fileName); //convert fileName into FAT format
     a62:	cb 01       	movw	r24, r22
     a64:	0e 94 4e 02 	call	0x49c	; 0x49c <convertFileName>
if(error) return 2;
     a68:	81 11       	cpse	r24, r1
     a6a:	a9 c0       	rjmp	.+338    	; 0xbbe <readFile+0x18e>

dir = findFiles (GET_FILE, fileName); //get the file location
     a6c:	b7 01       	movw	r22, r14
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	0e 94 47 03 	call	0x68e	; 0x68e <findFiles>
     a74:	9c 01       	movw	r18, r24
if(dir == 0) 
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	09 f4       	brne	.+2      	; 0xa7c <readFile+0x4c>
     a7a:	a3 c0       	rjmp	.+326    	; 0xbc2 <readFile+0x192>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
     a7c:	11 30       	cpi	r17, 0x01	; 1
     a7e:	09 f4       	brne	.+2      	; 0xa82 <readFile+0x52>
     a80:	a2 c0       	rjmp	.+324    	; 0xbc6 <readFile+0x196>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
     a82:	dc 01       	movw	r26, r24
     a84:	54 96       	adiw	r26, 0x14	; 20
     a86:	4d 90       	ld	r4, X+
     a88:	5c 90       	ld	r5, X
     a8a:	55 97       	sbiw	r26, 0x15	; 21
     a8c:	61 2c       	mov	r6, r1
     a8e:	71 2c       	mov	r7, r1
     a90:	32 01       	movw	r6, r4
     a92:	55 24       	eor	r5, r5
     a94:	44 24       	eor	r4, r4
     a96:	5a 96       	adiw	r26, 0x1a	; 26
     a98:	4d 91       	ld	r20, X+
     a9a:	5c 91       	ld	r21, X
     a9c:	5b 97       	sbiw	r26, 0x1b	; 27
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	d3 01       	movw	r26, r6
     aa4:	c2 01       	movw	r24, r4
     aa6:	84 2b       	or	r24, r20
     aa8:	95 2b       	or	r25, r21
     aaa:	a6 2b       	or	r26, r22
     aac:	b7 2b       	or	r27, r23
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	ab 83       	std	Y+3, r26	; 0x03
     ab4:	bc 83       	std	Y+4, r27	; 0x04

fileSize = dir->fileSize;
     ab6:	d9 01       	movw	r26, r18
     ab8:	5c 96       	adiw	r26, 0x1c	; 28
     aba:	4d 90       	ld	r4, X+
     abc:	5d 90       	ld	r5, X+
     abe:	6d 90       	ld	r6, X+
     ac0:	7c 90       	ld	r7, X
     ac2:	5f 97       	sbiw	r26, 0x1f	; 31
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
     ac4:	c1 2c       	mov	r12, r1
     ac6:	d1 2c       	mov	r13, r1
     ac8:	76 01       	movw	r14, r12

while(1)
{
  firstSector = getFirstSector (cluster);
LCD_sendCommand(CLEAR_COMMAND);
  for(j=0; j<sectorPerCluster; j++)
     aca:	21 2c       	mov	r2, r1
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
     acc:	31 2c       	mov	r3, r1
//TX_NEWLINE;
//TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
     ace:	69 81       	ldd	r22, Y+1	; 0x01
     ad0:	7a 81       	ldd	r23, Y+2	; 0x02
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	9c 81       	ldd	r25, Y+4	; 0x04
     ad6:	0e 94 49 00 	call	0x92	; 0x92 <getFirstSector>
     ada:	4b 01       	movw	r8, r22
     adc:	5c 01       	movw	r10, r24
LCD_sendCommand(CLEAR_COMMAND);
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
  for(j=0; j<sectorPerCluster; j++)
     ae4:	80 91 14 03 	lds	r24, 0x0314
     ae8:	90 91 15 03 	lds	r25, 0x0315
     aec:	89 2b       	or	r24, r25
     aee:	09 f4       	brne	.+2      	; 0xaf2 <readFile+0xc2>
     af0:	4d c0       	rjmp	.+154    	; 0xb8c <readFile+0x15c>
     af2:	2d 82       	std	Y+5, r2	; 0x05
  {
    SD_readSingleBlock(firstSector + j);
     af4:	c5 01       	movw	r24, r10
     af6:	b4 01       	movw	r22, r8
     af8:	bd 81       	ldd	r27, Y+5	; 0x05
     afa:	6b 0f       	add	r22, r27
     afc:	71 1d       	adc	r23, r1
     afe:	81 1d       	adc	r24, r1
     b00:	91 1d       	adc	r25, r1
     b02:	0e 94 81 09 	call	0x1302	; 0x1302 <SD_readSingleBlock>
    
	for(k=0; k<512; k++)
     b06:	00 e0       	ldi	r16, 0x00	; 0
     b08:	13 2d       	mov	r17, r3
    {
    //  transmitByte(buffer[k]);
	
if(buffer[k] == 0x0D && buffer[k+1] == 0x0A){
     b0a:	f8 01       	movw	r30, r16
     b0c:	ec 5e       	subi	r30, 0xEC	; 236
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	80 81       	ld	r24, Z
     b12:	8d 30       	cpi	r24, 0x0D	; 13
     b14:	59 f4       	brne	.+22     	; 0xb2c <readFile+0xfc>
     b16:	f8 01       	movw	r30, r16
     b18:	eb 5e       	subi	r30, 0xEB	; 235
     b1a:	fe 4f       	sbci	r31, 0xFE	; 254
     b1c:	80 81       	ld	r24, Z
     b1e:	8a 30       	cpi	r24, 0x0A	; 10
     b20:	29 f4       	brne	.+10     	; 0xb2c <readFile+0xfc>
	LCD_sendCommand(CLEAR_COMMAND);
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
	k = k+2; //ignore end line characters
     b28:	0e 5f       	subi	r16, 0xFE	; 254
     b2a:	1f 4f       	sbci	r17, 0xFF	; 255
}

	LCD_displayCharacter(buffer[k]);
     b2c:	f8 01       	movw	r30, r16
     b2e:	ec 5e       	subi	r30, 0xEC	; 236
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	80 81       	ld	r24, Z
     b34:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_displayCharacter>
	
      if ((byteCounter++) >= fileSize ) return 0;
     b38:	b7 01       	movw	r22, r14
     b3a:	a6 01       	movw	r20, r12
     b3c:	4f 5f       	subi	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	6f 4f       	sbci	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	c4 14       	cp	r12, r4
     b46:	d5 04       	cpc	r13, r5
     b48:	e6 04       	cpc	r14, r6
     b4a:	f7 04       	cpc	r15, r7
     b4c:	f0 f5       	brcc	.+124    	; 0xbca <readFile+0x19a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b4e:	ef e3       	ldi	r30, 0x3F	; 63
     b50:	fc e9       	ldi	r31, 0x9C	; 156
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <readFile+0x122>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <readFile+0x128>
     b58:	00 00       	nop
LCD_sendCommand(CLEAR_COMMAND);
  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
     b5a:	0f 5f       	subi	r16, 0xFF	; 255
     b5c:	1f 4f       	sbci	r17, 0xFF	; 255
     b5e:	01 15       	cp	r16, r1
     b60:	f2 e0       	ldi	r31, 0x02	; 2
     b62:	1f 07       	cpc	r17, r31
     b64:	18 f4       	brcc	.+6      	; 0xb6c <readFile+0x13c>
	k = k+2; //ignore end line characters
}

	LCD_displayCharacter(buffer[k]);
	
      if ((byteCounter++) >= fileSize ) return 0;
     b66:	6a 01       	movw	r12, r20
     b68:	7b 01       	movw	r14, r22
     b6a:	cf cf       	rjmp	.-98     	; 0xb0a <readFile+0xda>

while(1)
{
  firstSector = getFirstSector (cluster);
LCD_sendCommand(CLEAR_COMMAND);
  for(j=0; j<sectorPerCluster; j++)
     b6c:	2d 81       	ldd	r18, Y+5	; 0x05
     b6e:	2f 5f       	subi	r18, 0xFF	; 255
     b70:	2d 83       	std	Y+5, r18	; 0x05
     b72:	80 91 14 03 	lds	r24, 0x0314
     b76:	90 91 15 03 	lds	r25, 0x0315
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	28 17       	cp	r18, r24
     b7e:	39 07       	cpc	r19, r25
     b80:	18 f4       	brcc	.+6      	; 0xb88 <readFile+0x158>
	k = k+2; //ignore end line characters
}

	LCD_displayCharacter(buffer[k]);
	
      if ((byteCounter++) >= fileSize ) return 0;
     b82:	6a 01       	movw	r12, r20
     b84:	7b 01       	movw	r14, r22
     b86:	b6 cf       	rjmp	.-148    	; 0xaf4 <readFile+0xc4>
     b88:	6a 01       	movw	r12, r20
     b8a:	7b 01       	movw	r14, r22
	  _delay_ms(20);
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
     b8c:	00 e0       	ldi	r16, 0x00	; 0
     b8e:	10 e0       	ldi	r17, 0x00	; 0
     b90:	98 01       	movw	r18, r16
     b92:	42 2d       	mov	r20, r2
     b94:	69 81       	ldd	r22, Y+1	; 0x01
     b96:	7a 81       	ldd	r23, Y+2	; 0x02
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	0e 94 6a 00 	call	0xd4	; 0xd4 <getSetNextCluster>
     ba0:	69 83       	std	Y+1, r22	; 0x01
     ba2:	7a 83       	std	Y+2, r23	; 0x02
     ba4:	8b 83       	std	Y+3, r24	; 0x03
     ba6:	9c 83       	std	Y+4, r25	; 0x04
  if(cluster == 0) {
     ba8:	67 2b       	or	r22, r23
     baa:	68 2b       	or	r22, r24
     bac:	69 2b       	or	r22, r25
     bae:	09 f0       	breq	.+2      	; 0xbb2 <readFile+0x182>
     bb0:	8e cf       	rjmp	.-228    	; 0xace <readFile+0x9e>
	  LCD_displayString("error cluster");
     bb2:	82 e6       	ldi	r24, 0x62	; 98
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
	  //transmitString_F(PSTR("Error in getting cluster"));
	   return 0;
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <readFile+0x19c>
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;
error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <readFile+0x19c>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <readFile+0x19c>

if(flag == VERIFY) return (1);	//specified file name is already existing
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <readFile+0x19c>
	k = k+2; //ignore end line characters
}

	LCD_displayCharacter(buffer[k]);
	
      if ((byteCounter++) >= fileSize ) return 0;
     bca:	80 e0       	ldi	r24, 0x00	; 0
	  //transmitString_F(PSTR("Error in getting cluster"));
	   return 0;
                      }
}
return 0;
}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	5f 90       	pop	r5
     bf4:	4f 90       	pop	r4
     bf6:	3f 90       	pop	r3
     bf8:	2f 90       	pop	r2
     bfa:	08 95       	ret

00000bfc <LCD_sendCommand>:
	_delay_ms(10);
}

void LCD_sendCommand(uint8 command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     bfc:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     bfe:	c2 98       	cbi	0x18, 2	; 24
     c00:	e9 ef       	ldi	r30, 0xF9	; 249
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <LCD_sendCommand+0x8>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <LCD_sendCommand+0xe>
     c0a:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     c0c:	c3 9a       	sbi	0x18, 3	; 24
     c0e:	e9 ef       	ldi	r30, 0xF9	; 249
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <LCD_sendCommand+0x16>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <LCD_sendCommand+0x1c>
     c18:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command & 0xF0);
     c1a:	98 2f       	mov	r25, r24
     c1c:	90 7f       	andi	r25, 0xF0	; 240
     c1e:	9b bb       	out	0x1b, r25	; 27
     c20:	e9 ef       	ldi	r30, 0xF9	; 249
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <LCD_sendCommand+0x28>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <LCD_sendCommand+0x2e>
     c2a:	00 00       	nop
		#else
			LCD_DATA_PORT = ((command >> 4) & 0x0F);
		#endif

		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
     c2c:	c3 98       	cbi	0x18, 3	; 24
     c2e:	e9 ef       	ldi	r30, 0xF9	; 249
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	31 97       	sbiw	r30, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <LCD_sendCommand+0x36>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <LCD_sendCommand+0x3c>
     c38:	00 00       	nop
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     c3a:	c3 9a       	sbi	0x18, 3	; 24
     c3c:	e9 ef       	ldi	r30, 0xF9	; 249
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_sendCommand+0x44>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <LCD_sendCommand+0x4a>
     c46:	00 00       	nop
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command << 4) & 0xF0;
     c48:	f0 e1       	ldi	r31, 0x10	; 16
     c4a:	8f 9f       	mul	r24, r31
     c4c:	c0 01       	movw	r24, r0
     c4e:	11 24       	eor	r1, r1
     c50:	8b bb       	out	0x1b, r24	; 27
     c52:	89 ef       	ldi	r24, 0xF9	; 249
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LCD_sendCommand+0x5a>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <LCD_sendCommand+0x60>
     c5c:	00 00       	nop
		#else
			LCD_DATA_PORT = (command & 0x0F);
		#endif

		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
     c5e:	c3 98       	cbi	0x18, 3	; 24
     c60:	e9 ef       	ldi	r30, 0xF9	; 249
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <LCD_sendCommand+0x68>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <LCD_sendCommand+0x6e>
     c6a:	00 00       	nop
     c6c:	83 ec       	ldi	r24, 0xC3	; 195
     c6e:	99 e0       	ldi	r25, 0x09	; 9
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <LCD_sendCommand+0x74>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <LCD_sendCommand+0x7a>
     c76:	00 00       	nop
     c78:	08 95       	ret

00000c7a <LCD_init>:

#include "lcd.h"

void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     c7a:	87 b3       	in	r24, 0x17	; 23
     c7c:	8e 60       	ori	r24, 0x0E	; 14
     c7e:	87 bb       	out	0x17, r24	; 23

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
     c80:	8a b3       	in	r24, 0x1a	; 26
     c82:	80 6f       	ori	r24, 0xF0	; 240
     c84:	8a bb       	out	0x1a, r24	; 26
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     c8c:	88 e2       	ldi	r24, 0x28	; 40
     c8e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
     c9e:	83 ec       	ldi	r24, 0xC3	; 195
     ca0:	99 e0       	ldi	r25, 0x09	; 9
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <LCD_init+0x28>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <LCD_init+0x2e>
     ca8:	00 00       	nop
     caa:	08 95       	ret

00000cac <LCD_displayCharacter>:
	_delay_ms(10);
}

void LCD_displayCharacter(uint8 data)
{
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
     cac:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     cae:	c2 98       	cbi	0x18, 2	; 24
     cb0:	e9 ef       	ldi	r30, 0xF9	; 249
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCD_displayCharacter+0x8>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <LCD_displayCharacter+0xe>
     cba:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     cbc:	c3 9a       	sbi	0x18, 3	; 24
     cbe:	e9 ef       	ldi	r30, 0xF9	; 249
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <LCD_displayCharacter+0x16>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <LCD_displayCharacter+0x1c>
     cc8:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data & 0xF0);
     cca:	98 2f       	mov	r25, r24
     ccc:	90 7f       	andi	r25, 0xF0	; 240
     cce:	9b bb       	out	0x1b, r25	; 27
     cd0:	e9 ef       	ldi	r30, 0xF9	; 249
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <LCD_displayCharacter+0x28>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <LCD_displayCharacter+0x2e>
     cda:	00 00       	nop
		#else
			LCD_DATA_PORT = ((data >> 4) & 0x0F);
		#endif
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
     cdc:	c3 98       	cbi	0x18, 3	; 24
     cde:	e9 ef       	ldi	r30, 0xF9	; 249
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <LCD_displayCharacter+0x36>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <LCD_displayCharacter+0x3c>
     ce8:	00 00       	nop
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     cea:	c3 9a       	sbi	0x18, 3	; 24
     cec:	e9 ef       	ldi	r30, 0xF9	; 249
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <LCD_displayCharacter+0x44>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <LCD_displayCharacter+0x4a>
     cf6:	00 00       	nop
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data << 4) & 0xF0;
     cf8:	f0 e1       	ldi	r31, 0x10	; 16
     cfa:	8f 9f       	mul	r24, r31
     cfc:	c0 01       	movw	r24, r0
     cfe:	11 24       	eor	r1, r1
     d00:	8b bb       	out	0x1b, r24	; 27
     d02:	89 ef       	ldi	r24, 0xF9	; 249
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCD_displayCharacter+0x5a>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <LCD_displayCharacter+0x60>
     d0c:	00 00       	nop
		#else
			LCD_DATA_PORT = (data & 0x0F);
		#endif
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
     d0e:	c3 98       	cbi	0x18, 3	; 24
     d10:	e9 ef       	ldi	r30, 0xF9	; 249
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_displayCharacter+0x68>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <LCD_displayCharacter+0x6e>
     d1a:	00 00       	nop
     d1c:	08 95       	ret

00000d1e <LCD_displayString>:
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}

void LCD_displayString(const char *Str)
{
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	ec 01       	movw	r28, r24
	uint8 i = 0;
	while(Str[i] != '\0')
     d26:	88 81       	ld	r24, Y
     d28:	88 23       	and	r24, r24
     d2a:	51 f0       	breq	.+20     	; 0xd40 <LCD_displayString+0x22>
	#endif
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
     d2c:	10 e0       	ldi	r17, 0x00	; 0
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
     d2e:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_displayCharacter>
		i++;
     d32:	1f 5f       	subi	r17, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     d34:	fe 01       	movw	r30, r28
     d36:	e1 0f       	add	r30, r17
     d38:	f1 1d       	adc	r31, r1
     d3a:	80 81       	ld	r24, Z
     d3c:	81 11       	cpse	r24, r1
     d3e:	f7 cf       	rjmp	.-18     	; 0xd2e <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	08 95       	ret

00000d48 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	31 f0       	breq	.+12     	; 0xd58 <LCD_goToRowColumn+0x10>
     d4c:	70 f0       	brcs	.+28     	; 0xd6a <LCD_goToRowColumn+0x22>
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	31 f0       	breq	.+12     	; 0xd5e <LCD_goToRowColumn+0x16>
     d52:	83 30       	cpi	r24, 0x03	; 3
     d54:	39 f0       	breq	.+14     	; 0xd64 <LCD_goToRowColumn+0x1c>
     d56:	0a c0       	rjmp	.+20     	; 0xd6c <LCD_goToRowColumn+0x24>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
     d58:	90 e4       	ldi	r25, 0x40	; 64
     d5a:	96 0f       	add	r25, r22
				break;
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <LCD_goToRowColumn+0x24>
		case 2:
				Address=col+0x10;
     d5e:	90 e1       	ldi	r25, 0x10	; 16
     d60:	96 0f       	add	r25, r22
				break;
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <LCD_goToRowColumn+0x24>
		case 3:
				Address=col+0x50;
     d64:	90 e5       	ldi	r25, 0x50	; 80
     d66:	96 0f       	add	r25, r22
				break;
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <LCD_goToRowColumn+0x24>

	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
     d6a:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
     d6c:	89 2f       	mov	r24, r25
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
     d74:	08 95       	ret

00000d76 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
     d7c:	0e 94 a4 06 	call	0xd48	; 0xd48 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	08 95       	ret

00000d8c <__vector_2>:
void INT0_Init();
void INT1_Init();


ISR(INT1_vect)
{
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
	if(true_selector<number_of_files-1){++true_selector;++selector;}//navigate down list
     d9e:	80 91 f4 00 	lds	r24, 0x00F4
     da2:	90 91 f5 00 	lds	r25, 0x00F5
     da6:	20 91 60 00 	lds	r18, 0x0060
     daa:	30 91 61 00 	lds	r19, 0x0061
     dae:	21 50       	subi	r18, 0x01	; 1
     db0:	31 09       	sbc	r19, r1
     db2:	82 17       	cp	r24, r18
     db4:	93 07       	cpc	r25, r19
     db6:	74 f4       	brge	.+28     	; 0xdd4 <__vector_2+0x48>
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	90 93 f5 00 	sts	0x00F5, r25
     dbe:	80 93 f4 00 	sts	0x00F4, r24
     dc2:	80 91 f6 00 	lds	r24, 0x00F6
     dc6:	90 91 f7 00 	lds	r25, 0x00F7
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	90 93 f7 00 	sts	0x00F7, r25
     dd0:	80 93 f6 00 	sts	0x00F6, r24
	if(selector>3){selector=3; a++;}
     dd4:	80 91 f6 00 	lds	r24, 0x00F6
     dd8:	90 91 f7 00 	lds	r25, 0x00F7
     ddc:	04 97       	sbiw	r24, 0x04	; 4
     dde:	7c f0       	brlt	.+30     	; 0xdfe <__vector_2+0x72>
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 f7 00 	sts	0x00F7, r25
     de8:	80 93 f6 00 	sts	0x00F6, r24
     dec:	80 91 f2 00 	lds	r24, 0x00F2
     df0:	90 91 f3 00 	lds	r25, 0x00F3
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	90 93 f3 00 	sts	0x00F3, r25
     dfa:	80 93 f2 00 	sts	0x00F2, r24
	
}
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__vector_1>:

ISR(INT0_vect)
{
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	11 24       	eor	r1, r1
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
	if(true_selector>0){--true_selector;--selector;}//navigate up list
     e1e:	80 91 f4 00 	lds	r24, 0x00F4
     e22:	90 91 f5 00 	lds	r25, 0x00F5
     e26:	18 16       	cp	r1, r24
     e28:	19 06       	cpc	r1, r25
     e2a:	74 f4       	brge	.+28     	; 0xe48 <__vector_1+0x38>
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	90 93 f5 00 	sts	0x00F5, r25
     e32:	80 93 f4 00 	sts	0x00F4, r24
     e36:	80 91 f6 00 	lds	r24, 0x00F6
     e3a:	90 91 f7 00 	lds	r25, 0x00F7
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	90 93 f7 00 	sts	0x00F7, r25
     e44:	80 93 f6 00 	sts	0x00F6, r24
	if(selector<0){selector=0;a--;}
     e48:	80 91 f6 00 	lds	r24, 0x00F6
     e4c:	90 91 f7 00 	lds	r25, 0x00F7
     e50:	99 23       	and	r25, r25
     e52:	6c f4       	brge	.+26     	; 0xe6e <__vector_1+0x5e>
     e54:	10 92 f7 00 	sts	0x00F7, r1
     e58:	10 92 f6 00 	sts	0x00F6, r1
     e5c:	80 91 f2 00 	lds	r24, 0x00F2
     e60:	90 91 f3 00 	lds	r25, 0x00F3
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	90 93 f3 00 	sts	0x00F3, r25
     e6a:	80 93 f2 00 	sts	0x00F2, r24
}
     e6e:	9f 91       	pop	r25
     e70:	8f 91       	pop	r24
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <port_init>:


void port_init(void)
{

PORTB = 0xEF;
     e7c:	8f ee       	ldi	r24, 0xEF	; 239
     e7e:	88 bb       	out	0x18, r24	; 24
SET_BIT(DDRB,4); //MISO line i/p, rest o/p
     e80:	bc 9a       	sbi	0x17, 4	; 23
SET_BIT(DDRB,5);
     e82:	bd 9a       	sbi	0x17, 5	; 23
SET_BIT(DDRB,7);
     e84:	bf 9a       	sbi	0x17, 7	; 23
CLEAR_BIT(DDRB,6);
     e86:	be 98       	cbi	0x17, 6	; 23
   
CLEAR_BIT(DDRC,0); //input  for select button
     e88:	a0 98       	cbi	0x14, 0	; 20
PORTC |= (1<<0); //pull up resistor
     e8a:	a8 9a       	sbi	0x15, 0	; 21
     e8c:	08 95       	ret

00000e8e <select_file>:
return 0;
}
//********** END *********** www.dharmanitech.com *************

int select_file()
{
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
	
	while(1)
	{
		if(BIT_IS_CLEAR(PINC,0))
     e92:	98 99       	sbic	0x13, 0	; 19
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <select_file+0x12>
     e96:	80 91 f4 00 	lds	r24, 0x00F4
     e9a:	90 91 f5 00 	lds	r25, 0x00F5
     e9e:	39 c0       	rjmp	.+114    	; 0xf12 <select_file+0x84>
		return true_selector;
		
		if(a<0)a=0;
     ea0:	80 91 f2 00 	lds	r24, 0x00F2
     ea4:	90 91 f3 00 	lds	r25, 0x00F3
     ea8:	99 23       	and	r25, r25
     eaa:	84 f5       	brge	.+96     	; 0xf0c <select_file+0x7e>
     eac:	10 92 f3 00 	sts	0x00F3, r1
     eb0:	10 92 f2 00 	sts	0x00F2, r1
     eb4:	2b c0       	rjmp	.+86     	; 0xf0c <select_file+0x7e>
		
		for(int i=0;i<4;i++){
			if(i==selector){
     eb6:	80 91 f6 00 	lds	r24, 0x00F6
     eba:	90 91 f7 00 	lds	r25, 0x00F7
     ebe:	c8 17       	cp	r28, r24
     ec0:	d9 07       	cpc	r29, r25
     ec2:	41 f4       	brne	.+16     	; 0xed4 <select_file+0x46>
				LCD_goToRowColumn(selector,0);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	8c 2f       	mov	r24, r28
     ec8:	0e 94 a4 06 	call	0xd48	; 0xd48 <LCD_goToRowColumn>
				LCD_displayCharacter('>');
     ecc:	8e e3       	ldi	r24, 0x3E	; 62
     ece:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_displayCharacter>
     ed2:	07 c0       	rjmp	.+14     	; 0xee2 <select_file+0x54>
			}
			else{
				LCD_goToRowColumn(i,0);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	8c 2f       	mov	r24, r28
     ed8:	0e 94 a4 06 	call	0xd48	; 0xd48 <LCD_goToRowColumn>
				LCD_displayCharacter(' ');
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_displayCharacter>
			}
			LCD_displayStringRowColumn(i,1,files[i+a]);
     ee2:	e0 91 f2 00 	lds	r30, 0x00F2
     ee6:	f0 91 f3 00 	lds	r31, 0x00F3
     eea:	ec 0f       	add	r30, r28
     eec:	fd 1f       	adc	r31, r29
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	ea 5e       	subi	r30, 0xEA	; 234
     ef4:	fc 4f       	sbci	r31, 0xFC	; 252
     ef6:	40 81       	ld	r20, Z
     ef8:	51 81       	ldd	r21, Z+1	; 0x01
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	8c 2f       	mov	r24, r28
     efe:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_displayStringRowColumn>
		if(BIT_IS_CLEAR(PINC,0))
		return true_selector;
		
		if(a<0)a=0;
		
		for(int i=0;i<4;i++){
     f02:	21 96       	adiw	r28, 0x01	; 1
     f04:	c4 30       	cpi	r28, 0x04	; 4
     f06:	d1 05       	cpc	r29, r1
     f08:	b1 f6       	brne	.-84     	; 0xeb6 <select_file+0x28>
     f0a:	c3 cf       	rjmp	.-122    	; 0xe92 <select_file+0x4>
return 0;
}
//********** END *********** www.dharmanitech.com *************

int select_file()
{
     f0c:	c0 e0       	ldi	r28, 0x00	; 0
     f0e:	d0 e0       	ldi	r29, 0x00	; 0
     f10:	d2 cf       	rjmp	.-92     	; 0xeb6 <select_file+0x28>
			}
			LCD_displayStringRowColumn(i,1,files[i+a]);
		}
	}
	return true_selector;
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <INT0_Init>:


void INT0_Init(void)
{
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
     f18:	8f b7       	in	r24, 0x3f	; 63
     f1a:	8f 77       	andi	r24, 0x7F	; 127
     f1c:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
     f1e:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<PD2);                  // Enable the internal pull up resistor at PD2 pin
     f20:	92 9a       	sbi	0x12, 2	; 18
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
     f22:	8b b7       	in	r24, 0x3b	; 59
     f24:	80 64       	ori	r24, 0x40	; 64
     f26:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
     f28:	85 b7       	in	r24, 0x35	; 53
     f2a:	83 60       	ori	r24, 0x03	; 3
     f2c:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
     f2e:	8f b7       	in	r24, 0x3f	; 63
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	8f bf       	out	0x3f, r24	; 63
     f34:	08 95       	ret

00000f36 <INT1_Init>:
}

void INT1_Init(void)
{
	SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
     f36:	8f b7       	in	r24, 0x3f	; 63
     f38:	8f 77       	andi	r24, 0x7F	; 127
     f3a:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD3));  // Configure INT1/PD3 as input pin
     f3c:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<PD3);     // Enable the internal pull up resistor at PD3 pin
     f3e:	93 9a       	sbi	0x12, 3	; 18
	GICR  |= (1<<INT1);    // Enable external interrupt pin INT1
     f40:	8b b7       	in	r24, 0x3b	; 59
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	8b bf       	out	0x3b, r24	; 59
	// Trigger INT1 with the falling edge
	MCUCR |= (1<<ISC11);
     f46:	85 b7       	in	r24, 0x35	; 53
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     f4c:	85 b7       	in	r24, 0x35	; 53
     f4e:	8b 7f       	andi	r24, 0xFB	; 251
     f50:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
     f52:	8f b7       	in	r24, 0x3f	; 63
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	8f bf       	out	0x3f, r24	; 63
     f58:	08 95       	ret

00000f5a <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
     f5a:	f8 94       	cli
  spi_init();
     f5c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <spi_init>
     f60:	8f e1       	ldi	r24, 0x1F	; 31
     f62:	9e e4       	ldi	r25, 0x4E	; 78
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <init_devices+0xa>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <init_devices+0x10>
     f6a:	00 00       	nop
  _delay_ms(10);
 port_init();
     f6c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <port_init>
     f70:	8f e1       	ldi	r24, 0x1F	; 31
     f72:	9e e4       	ldi	r25, 0x4E	; 78
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <init_devices+0x1a>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <init_devices+0x20>
     f7a:	00 00       	nop
_delay_ms(10);
 LCD_init();
     f7c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_init>

INT0_Init();
     f80:	0e 94 8c 07 	call	0xf18	; 0xf18 <INT0_Init>
     f84:	8f e1       	ldi	r24, 0x1F	; 31
     f86:	9e e4       	ldi	r25, 0x4E	; 78
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <init_devices+0x2e>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <init_devices+0x34>
     f8e:	00 00       	nop
_delay_ms(10);
INT1_Init();
     f90:	0e 94 9b 07 	call	0xf36	; 0xf36 <INT1_Init>
     f94:	8f e1       	ldi	r24, 0x1F	; 31
     f96:	9e e4       	ldi	r25, 0x4E	; 78
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <init_devices+0x3e>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <init_devices+0x44>
     f9e:	00 00       	nop

// uart0_init();

_delay_ms(10);
 MCUCR = 0x00;
     fa0:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
     fa2:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
     fa4:	19 be       	out	0x39, r1	; 57
     fa6:	08 95       	ret

00000fa8 <main>:
 //all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
int selected_file;
//unsigned char fileName[13];

//_delay_ms(100);  //delay for VCC stabilization
 
init_devices();
     fae:	0e 94 ad 07 	call	0xf5a	; 0xf5a <init_devices>
//transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
//TX_NEWLINE;
//transmitString_F (PSTR("*********************************************"));
//TX_NEWLINE;
// 
  cardType = 0;
     fb2:	10 92 39 03 	sts	0x0339, r1
  LCD_sendCommand(CLEAR_COMMAND);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
 	 LCD_displayString("init");
     fbc:	80 e7       	ldi	r24, 0x70	; 112
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
     fc4:	ca e0       	ldi	r28, 0x0A	; 10
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
 
  for (i=0; i<10; i++)
  {
 	LCD_displayCharacter('.');
     fc8:	8e e2       	ldi	r24, 0x2E	; 46
     fca:	0e 94 56 06 	call	0xcac	; 0xcac <LCD_displayCharacter>
    error = SD_init();
     fce:	0e 94 dd 08 	call	0x11ba	; 0x11ba <SD_init>
     fd2:	18 2f       	mov	r17, r24
    if(!error) break;
     fd4:	88 23       	and	r24, r24
     fd6:	d1 f1       	breq	.+116    	; 0x104c <main+0xa4>
     fd8:	21 97       	sbiw	r28, 0x01	; 1
// 
  cardType = 0;
  LCD_sendCommand(CLEAR_COMMAND);
 	 LCD_displayString("init");
 
  for (i=0; i<10; i++)
     fda:	20 97       	sbiw	r28, 0x00	; 0
     fdc:	a9 f7       	brne	.-22     	; 0xfc8 <main+0x20>
     fde:	46 c0       	rjmp	.+140    	; 0x106c <main+0xc4>
  }
  
  if(error)
  {
 	 LCD_sendCommand(CLEAR_COMMAND);
    if(error == 1) LCD_displayString("sd not detected.."); // transmitString_F(PSTR("SD card not detected.."));
     fe0:	85 e7       	ldi	r24, 0x75	; 117
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <main+0x46>
    if(error == 2) LCD_displayString("Init failed..");//transmitString_F(PSTR("Card Initialization failed.."));
     fea:	12 30       	cpi	r17, 0x02	; 2
     fec:	09 f0       	breq	.+2      	; 0xff0 <main+0x48>
     fee:	05 c0       	rjmp	.+10     	; 0xffa <main+0x52>
     ff0:	87 e8       	ldi	r24, 0x87	; 135
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
     ff8:	fa cf       	rjmp	.-12     	; 0xfee <main+0x46>
     ffa:	ff cf       	rjmp	.-2      	; 0xffa <main+0x52>
// CLEAR_BIT(PORTD,4);
 
switch (cardType)
 {
   case 1://transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
          LCD_displayString("Ver 1.x");
     ffc:	85 e9       	ldi	r24, 0x95	; 149
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
   		 break;
    1004:	0e c0       	rjmp	.+28     	; 0x1022 <main+0x7a>
   case 2://transmitString_F(PSTR("High Capacity Card Detected!"));
          LCD_displayString("High Capacity Card Detected!");
    1006:	8d e9       	ldi	r24, 0x9D	; 157
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
   		 break;
    100e:	09 c0       	rjmp	.+18     	; 0x1022 <main+0x7a>
   case 3://transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
       LCD_displayString("Ver 2.x");
    1010:	8a eb       	ldi	r24, 0xBA	; 186
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
   		 break;
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <main+0x7a>
   default://transmitString_F(PSTR("Unknown SD Card Detected!"));
       LCD_displayString("Unknown card!");
    101a:	82 ec       	ldi	r24, 0xC2	; 194
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
   		 break; 
 }
 
 
 SPI_HIGH_SPEED;	//SCK - 4 MHz
    1022:	80 e5       	ldi	r24, 0x50	; 80
    1024:	8d b9       	out	0x0d, r24	; 13
    1026:	70 9a       	sbi	0x0e, 0	; 14
    1028:	8f ec       	ldi	r24, 0xCF	; 207
    102a:	97 e0       	ldi	r25, 0x07	; 7
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <main+0x84>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <main+0x8a>
    1032:	00 00       	nop
 _delay_ms(1);   //some delay
 
 
 FAT32_active = 1;
 error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1034:	0e 94 76 01 	call	0x2ec	; 0x2ec <getBootSectorData>
 if(error) 	
    1038:	88 23       	and	r24, r24
    103a:	f9 f0       	breq	.+62     	; 0x107a <main+0xd2>
 {
//   //TX_NEWLINE;
//  // transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
  LCD_sendCommand(CLEAR_COMMAND);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
  LCD_displayString("FAT32 not found!");
    1042:	80 ed       	ldi	r24, 0xD0	; 208
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
    104a:	17 c0       	rjmp	.+46     	; 0x107a <main+0xd2>
    if(error == 1) LCD_displayString("sd not detected.."); // transmitString_F(PSTR("SD card not detected.."));
    if(error == 2) LCD_displayString("Init failed..");//transmitString_F(PSTR("Card Initialization failed.."));
  
    while(1);  //wait here forever if error in SD init 
  }
  LCD_sendCommand(CLEAR_COMMAND);
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
  LCD_displayString("no error ");
    1052:	88 ee       	ldi	r24, 0xE8	; 232
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
 // _delay_ms(1000);
// CLEAR_BIT(PORTD,4);
 
switch (cardType)
    105a:	80 91 39 03 	lds	r24, 0x0339
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	91 f2       	breq	.-92     	; 0x1006 <main+0x5e>
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	a9 f2       	breq	.-86     	; 0x1010 <main+0x68>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	c1 f6       	brne	.-80     	; 0x101a <main+0x72>
    106a:	c8 cf       	rjmp	.-112    	; 0xffc <main+0x54>
    if(!error) break;
  }
  
  if(error)
  {
 	 LCD_sendCommand(CLEAR_COMMAND);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
    if(error == 1) LCD_displayString("sd not detected.."); // transmitString_F(PSTR("SD card not detected.."));
    1072:	11 30       	cpi	r17, 0x01	; 1
    1074:	09 f0       	breq	.+2      	; 0x1078 <main+0xd0>
    1076:	b9 cf       	rjmp	.-142    	; 0xfea <main+0x42>
    1078:	b3 cf       	rjmp	.-154    	; 0xfe0 <main+0x38>
//  // transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
  LCD_sendCommand(CLEAR_COMMAND);
  LCD_displayString("FAT32 not found!");
   FAT32_active = 0;
 }
 LCD_displayStringRowColumn(1,0,"finish");
    107a:	41 ee       	ldi	r20, 0xE1	; 225
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCD_displayStringRowColumn>
// 		break;
// 		#endif

		//case '5':// TX_NEWLINE;
		
 		 LCD_sendCommand(CLEAR_COMMAND);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
		findFiles(GET_LIST,0);
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	0e 94 47 03 	call	0x68e	; 0x68e <findFiles>
// 		_delay_ms(5000);
 		LCD_sendCommand(CLEAR_COMMAND);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
       // LCD_goToRowColumn(selector,0);
		selected_file = select_file();
    109c:	0e 94 47 07 	call	0xe8e	; 0xe8e <select_file>
    10a0:	ec 01       	movw	r28, r24
		LCD_sendCommand(CLEAR_COMMAND);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_sendCommand>
		LCD_displayString(files[selected_file]);
    10a8:	fe 01       	movw	r30, r28
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	ea 5e       	subi	r30, 0xEA	; 234
    10b0:	fc 4f       	sbci	r31, 0xFC	; 252
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_displayString>
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	2d e3       	ldi	r18, 0x3D	; 61
    10be:	89 e4       	ldi	r24, 0x49	; 73
    10c0:	91 50       	subi	r25, 0x01	; 1
    10c2:	20 40       	sbci	r18, 0x00	; 0
    10c4:	80 40       	sbci	r24, 0x00	; 0
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <main+0x118>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <main+0x122>
    10ca:	00 00       	nop
		_delay_ms(3000);
		readFile(READ,files[selected_file]);
    10cc:	fe 01       	movw	r30, r28
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	ea 5e       	subi	r30, 0xEA	; 234
    10d4:	fc 4f       	sbci	r31, 0xFC	; 252
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	0e 94 18 05 	call	0xa30	; 0xa30 <readFile>
// 	}
// 
// 	//TX_NEWLINE;
//}
return 0;
}
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	08 95       	ret

000010ec <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	cf 93       	push	r28
    10f6:	c8 2f       	mov	r28, r24
    10f8:	6a 01       	movw	r12, r20
    10fa:	7b 01       	movw	r14, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    10fc:	80 91 2e 03 	lds	r24, 0x032E
    1100:	81 11       	cpse	r24, r1
    1102:	15 c0       	rjmp	.+42     	; 0x112e <SD_sendCommand+0x42>
if(cmd == READ_SINGLE_BLOCK     ||
    1104:	8f ee       	ldi	r24, 0xEF	; 239
    1106:	8c 0f       	add	r24, r28
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	40 f0       	brcs	.+16     	; 0x111c <SD_sendCommand+0x30>
   cmd == READ_MULTIPLE_BLOCKS  ||
    110c:	88 ee       	ldi	r24, 0xE8	; 232
    110e:	8c 0f       	add	r24, r28
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	20 f0       	brcs	.+8      	; 0x111c <SD_sendCommand+0x30>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
    1114:	80 ee       	ldi	r24, 0xE0	; 224
    1116:	8c 0f       	add	r24, r28
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	48 f4       	brcc	.+18     	; 0x112e <SD_sendCommand+0x42>
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    111c:	0b 2e       	mov	r0, r27
    111e:	b9 e0       	ldi	r27, 0x09	; 9
    1120:	cc 0c       	add	r12, r12
    1122:	dd 1c       	adc	r13, r13
    1124:	ee 1c       	adc	r14, r14
    1126:	ff 1c       	adc	r15, r15
    1128:	ba 95       	dec	r27
    112a:	d1 f7       	brne	.-12     	; 0x1120 <SD_sendCommand+0x34>
    112c:	b0 2d       	mov	r27, r0
   }	   

SD_CS_ASSERT;
    112e:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    1130:	8c 2f       	mov	r24, r28
    1132:	80 64       	ori	r24, 0x40	; 64
    1134:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
SPI_transmit(arg>>24);
    1138:	8f 2d       	mov	r24, r15
    113a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
SPI_transmit(arg>>16);
    113e:	8e 2d       	mov	r24, r14
    1140:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
SPI_transmit(arg>>8);
    1144:	8d 2d       	mov	r24, r13
    1146:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
SPI_transmit(arg);
    114a:	8c 2d       	mov	r24, r12
    114c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    1150:	c8 30       	cpi	r28, 0x08	; 8
    1152:	21 f4       	brne	.+8      	; 0x115c <SD_sendCommand+0x70>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    1154:	87 e8       	ldi	r24, 0x87	; 135
    1156:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
    115a:	07 c0       	rjmp	.+14     	; 0x116a <SD_sendCommand+0x7e>
else 
  SPI_transmit(0x95); 
    115c:	85 e9       	ldi	r24, 0x95	; 149
    115e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
    1162:	03 c0       	rjmp	.+6      	; 0x116a <SD_sendCommand+0x7e>
    1164:	fa 94       	dec	r15

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    1166:	11 f4       	brne	.+4      	; 0x116c <SD_sendCommand+0x80>
    1168:	1b c0       	rjmp	.+54     	; 0x11a0 <SD_sendCommand+0xb4>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    116a:	f1 2c       	mov	r15, r1
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    116c:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
    1170:	8f 3f       	cpi	r24, 0xFF	; 255
    1172:	c1 f3       	breq	.-16     	; 0x1164 <SD_sendCommand+0x78>
    1174:	f8 2e       	mov	r15, r24
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    1176:	81 11       	cpse	r24, r1
    1178:	15 c0       	rjmp	.+42     	; 0x11a4 <SD_sendCommand+0xb8>
    117a:	ca 33       	cpi	r28, 0x3A	; 58
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <SD_sendCommand+0xba>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    117e:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    1182:	86 ff       	sbrs	r24, 6
    1184:	04 c0       	rjmp	.+8      	; 0x118e <SD_sendCommand+0xa2>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 2e 03 	sts	0x032E, r24
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <SD_sendCommand+0xa6>
  else SDHC_flag = 0;
    118e:	10 92 2e 03 	sts	0x032E, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    1192:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    1196:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
  SPI_receive(); 
    119a:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <SD_sendCommand+0xba>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    11a0:	f8 2e       	mov	r15, r24
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <SD_sendCommand+0xba>
    11a4:	f8 2e       	mov	r15, r24
  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
  SPI_receive(); //one can use these bytes to check power supply limits of SD
  SPI_receive(); 
}

SPI_receive(); //extra 8 CLK
    11a6:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
SD_CS_DEASSERT;
    11aa:	c4 9a       	sbi	0x18, 4	; 24

return response; //return state
}
    11ac:	8f 2d       	mov	r24, r15
    11ae:	cf 91       	pop	r28
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	08 95       	ret

000011ba <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
    11ca:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    11cc:	d9 f7       	brne	.-10     	; 0x11c4 <SD_init+0xa>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    11ce:	c4 98       	cbi	0x18, 4	; 24
do
{

   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	ba 01       	movw	r22, r20
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    11dc:	c0 e2       	ldi	r28, 0x20	; 32
    11de:	d0 e0       	ldi	r29, 0x00	; 0
    11e0:	0a c0       	rjmp	.+20     	; 0x11f6 <SD_init+0x3c>
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	ba 01       	movw	r22, r20
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    11ee:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    11f0:	20 97       	sbiw	r28, 0x00	; 0
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <SD_init+0x3c>
    11f4:	73 c0       	rjmp	.+230    	; 0x12dc <SD_init+0x122>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	a1 f7       	brne	.-24     	; 0x11e2 <SD_init+0x28>

SD_CS_DEASSERT;
    11fa:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit (0xff);
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
SPI_transmit (0xff);
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    1208:	4a ea       	ldi	r20, 0xAA	; 170
    120a:	51 e0       	ldi	r21, 0x01	; 1
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    1216:	ce ef       	ldi	r28, 0xFE	; 254
    1218:	d0 e0       	ldi	r29, 0x00	; 0
    121a:	0f c0       	rjmp	.+30     	; 0x123a <SD_init+0x80>
    121c:	4a ea       	ldi	r20, 0xAA	; 170
    121e:	51 e0       	ldi	r21, 0x01	; 1
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	88 e0       	ldi	r24, 0x08	; 8
    1226:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    122a:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    122c:	20 97       	sbiw	r28, 0x00	; 0
    122e:	29 f4       	brne	.+10     	; 0x123a <SD_init+0x80>
   {
	//  TX_NEWLINE;
	  SD_version = 1;
	  cardType = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 39 03 	sts	0x0339, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	//  TX_NEWLINE;
	  SD_version = 1;
    1236:	01 e0       	ldi	r16, 0x01	; 1
	  cardType = 1;
	  break;
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <SD_init+0x86>
   } //time out

}while(response != 0x01);
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	79 f7       	brne	.-34     	; 0x121c <SD_init+0x62>
SPI_transmit (0xff);
SPI_transmit (0xff);

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    123e:	02 e0       	ldi	r16, 0x02	; 2

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	ba 01       	movw	r22, r20
    1246:	87 e3       	ldi	r24, 0x37	; 55
    1248:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	70 e4       	ldi	r23, 0x40	; 64
    1254:	89 e2       	ldi	r24, 0x29	; 41
    1256:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    125a:	ce ef       	ldi	r28, 0xFE	; 254
    125c:	d0 e0       	ldi	r29, 0x00	; 0
    125e:	10 c0       	rjmp	.+32     	; 0x1280 <SD_init+0xc6>

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	ba 01       	movw	r22, r20
    1266:	87 e3       	ldi	r24, 0x37	; 55
    1268:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	70 e4       	ldi	r23, 0x40	; 64
    1274:	89 e2       	ldi	r24, 0x29	; 41
    1276:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    127a:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    127c:	20 97       	sbiw	r28, 0x00	; 0
    127e:	81 f1       	breq	.+96     	; 0x12e0 <SD_init+0x126>
   {
    //  TX_NEWLINE;
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    1280:	81 11       	cpse	r24, r1
    1282:	ee cf       	rjmp	.-36     	; 0x1260 <SD_init+0xa6>


retry = 0;
SDHC_flag = 0;
    1284:	10 92 2e 03 	sts	0x032E, r1

if (SD_version == 2)
    1288:	02 30       	cpi	r16, 0x02	; 2
    128a:	d1 f4       	brne	.+52     	; 0x12c0 <SD_init+0x106>
    128c:	2b c0       	rjmp	.+86     	; 0x12e4 <SD_init+0x12a>
{ 
	
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	ba 01       	movw	r22, r20
    1294:	8a e3       	ldi	r24, 0x3A	; 58
    1296:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    129a:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    129c:	20 97       	sbiw	r28, 0x00	; 0
    129e:	19 f4       	brne	.+6      	; 0x12a6 <SD_init+0xec>
     {
    //   TX_NEWLINE;
	   cardType = 0;
    12a0:	10 92 39 03 	sts	0x0339, r1
	   break;
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <SD_init+0xf0>
     } //time out

   }while(response != 0x00);
    12a6:	81 11       	cpse	r24, r1
    12a8:	f2 cf       	rjmp	.-28     	; 0x128e <SD_init+0xd4>

   if(SDHC_flag == 1) cardType = 2;
    12aa:	80 91 2e 03 	lds	r24, 0x032E
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	21 f4       	brne	.+8      	; 0x12ba <SD_init+0x100>
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	80 93 39 03 	sts	0x0339, r24
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <SD_init+0x106>
   else cardType = 3;
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	80 93 39 03 	sts	0x0339, r24
}

SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	ba 01       	movw	r22, r20
    12c6:	8b e3       	ldi	r24, 0x3B	; 59
    12c8:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	52 e0       	ldi	r21, 0x02	; 2
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	80 e1       	ldi	r24, 0x10	; 16
    12d6:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>


return 0; //successful return
    12da:	0d c0       	rjmp	.+26     	; 0x12f6 <SD_init+0x13c>
{

   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    12dc:	11 e0       	ldi	r17, 0x01	; 1
    12de:	0b c0       	rjmp	.+22     	; 0x12f6 <SD_init+0x13c>

retry++;
if(retry>0xfe) 
   {
    //  TX_NEWLINE;
	  return 2;  //time out, card initialization failed
    12e0:	12 e0       	ldi	r17, 0x02	; 2
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <SD_init+0x13c>
if (SD_version == 2)
{ 
	
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	ba 01       	movw	r22, r20
    12ea:	8a e3       	ldi	r24, 0x3A	; 58
    12ec:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
    12f0:	ce ef       	ldi	r28, 0xFE	; 254
    12f2:	d0 e0       	ldi	r29, 0x00	; 0
    12f4:	d8 cf       	rjmp	.-80     	; 0x12a6 <SD_init+0xec>
SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    12f6:	81 2f       	mov	r24, r17
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	ab 01       	movw	r20, r22
    1308:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    130a:	81 e1       	ldi	r24, 0x11	; 17
    130c:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    1310:	81 11       	cpse	r24, r1
    1312:	23 c0       	rjmp	.+70     	; 0x135a <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    1314:	c4 98       	cbi	0x18, 4	; 24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    1316:	c0 e0       	ldi	r28, 0x00	; 0
    1318:	d0 e0       	ldi	r29, 0x00	; 0
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <SD_readSingleBlock+0x26>
    131c:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    131e:	20 97       	sbiw	r28, 0x00	; 0
    1320:	19 f4       	brne	.+6      	; 0x1328 <SD_readSingleBlock+0x26>
    1322:	c4 9a       	sbi	0x18, 4	; 24
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	19 c0       	rjmp	.+50     	; 0x135a <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    1328:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
    132c:	8e 3f       	cpi	r24, 0xFE	; 254
    132e:	b1 f7       	brne	.-20     	; 0x131c <SD_readSingleBlock+0x1a>
    1330:	c0 e0       	ldi	r28, 0x00	; 0
    1332:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    1334:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
    1338:	fe 01       	movw	r30, r28
    133a:	ec 5e       	subi	r30, 0xEC	; 236
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    1340:	21 96       	adiw	r28, 0x01	; 1
    1342:	c1 15       	cp	r28, r1
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	d8 07       	cpc	r29, r24
    1348:	a9 f7       	brne	.-22     	; 0x1334 <SD_readSingleBlock+0x32>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    134a:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
SPI_receive();
    134e:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    1352:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
SD_CS_DEASSERT;
    1356:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
}
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ab 01       	movw	r20, r22
    1366:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    1368:	88 e1       	ldi	r24, 0x18	; 24
    136a:	0e 94 76 08 	call	0x10ec	; 0x10ec <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    136e:	81 11       	cpse	r24, r1
    1370:	3e c0       	rjmp	.+124    	; 0x13ee <SD_writeSingleBlock+0x8e>

SD_CS_ASSERT;
    1372:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    1374:	8e ef       	ldi	r24, 0xFE	; 254
    1376:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    137a:	c0 e0       	ldi	r28, 0x00	; 0
    137c:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    137e:	fe 01       	movw	r30, r28
    1380:	ec 5e       	subi	r30, 0xEC	; 236
    1382:	fe 4f       	sbci	r31, 0xFE	; 254
    1384:	80 81       	ld	r24, Z
    1386:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    138a:	21 96       	adiw	r28, 0x01	; 1
    138c:	c1 15       	cp	r28, r1
    138e:	22 e0       	ldi	r18, 0x02	; 2
    1390:	d2 07       	cpc	r29, r18
    1392:	a9 f7       	brne	.-22     	; 0x137e <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
SPI_transmit(0xff);
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>

response = SPI_receive();
    13a0:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    13a4:	98 2f       	mov	r25, r24
    13a6:	9f 71       	andi	r25, 0x1F	; 31
    13a8:	95 30       	cpi	r25, 0x05	; 5
    13aa:	39 f0       	breq	.+14     	; 0x13ba <SD_writeSingleBlock+0x5a>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    13ac:	c4 9a       	sbi	0x18, 4	; 24
  return response;
    13ae:	1f c0       	rjmp	.+62     	; 0x13ee <SD_writeSingleBlock+0x8e>
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    13b0:	21 96       	adiw	r28, 0x01	; 1
    13b2:	29 f4       	brne	.+10     	; 0x13be <SD_writeSingleBlock+0x5e>
    13b4:	c4 9a       	sbi	0x18, 4	; 24
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	1a c0       	rjmp	.+52     	; 0x13ee <SD_writeSingleBlock+0x8e>
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    13ba:	c0 e0       	ldi	r28, 0x00	; 0
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    13be:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
    13c2:	88 23       	and	r24, r24
    13c4:	a9 f3       	breq	.-22     	; 0x13b0 <SD_writeSingleBlock+0x50>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    13c6:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	0e 94 fe 09 	call	0x13fc	; 0x13fc <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    13ce:	c4 98       	cbi	0x18, 4	; 24

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <SD_writeSingleBlock+0x82>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	21 96       	adiw	r28, 0x01	; 1
    13d8:	19 f4       	brne	.+6      	; 0x13e0 <SD_writeSingleBlock+0x80>
    13da:	c4 9a       	sbi	0x18, 4	; 24
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	07 c0       	rjmp	.+14     	; 0x13ee <SD_writeSingleBlock+0x8e>
    13e0:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    13e2:	0e 94 03 0a 	call	0x1406	; 0x1406 <SPI_receive>
    13e6:	88 23       	and	r24, r24
    13e8:	a1 f3       	breq	.-24     	; 0x13d2 <SD_writeSingleBlock+0x72>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    13ea:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
}
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
	SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    13f4:	82 e5       	ldi	r24, 0x52	; 82
    13f6:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00;
    13f8:	1e b8       	out	0x0e, r1	; 14
    13fa:	08 95       	ret

000013fc <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
	// Start transmission
	SPDR = data;
    13fc:	8f b9       	out	0x0f, r24	; 15

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    13fe:	77 9b       	sbis	0x0e, 7	; 14
    1400:	fe cf       	rjmp	.-4      	; 0x13fe <SPI_transmit+0x2>
	data = SPDR;
    1402:	8f b1       	in	r24, 0x0f	; 15

	return(data);
}
    1404:	08 95       	ret

00001406 <SPI_receive>:
unsigned char SPI_receive(void)
{
	unsigned char data;
	// Wait for reception complete

	SPDR = 0xff;
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    140a:	77 9b       	sbis	0x0e, 7	; 14
    140c:	fe cf       	rjmp	.-4      	; 0x140a <SPI_receive+0x4>
	data = SPDR;
    140e:	8f b1       	in	r24, 0x0f	; 15

	// Return data register
	return data;
}
    1410:	08 95       	ret

00001412 <__udivmodsi4>:
    1412:	a1 e2       	ldi	r26, 0x21	; 33
    1414:	1a 2e       	mov	r1, r26
    1416:	aa 1b       	sub	r26, r26
    1418:	bb 1b       	sub	r27, r27
    141a:	fd 01       	movw	r30, r26
    141c:	0d c0       	rjmp	.+26     	; 0x1438 <__udivmodsi4_ep>

0000141e <__udivmodsi4_loop>:
    141e:	aa 1f       	adc	r26, r26
    1420:	bb 1f       	adc	r27, r27
    1422:	ee 1f       	adc	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	a2 17       	cp	r26, r18
    1428:	b3 07       	cpc	r27, r19
    142a:	e4 07       	cpc	r30, r20
    142c:	f5 07       	cpc	r31, r21
    142e:	20 f0       	brcs	.+8      	; 0x1438 <__udivmodsi4_ep>
    1430:	a2 1b       	sub	r26, r18
    1432:	b3 0b       	sbc	r27, r19
    1434:	e4 0b       	sbc	r30, r20
    1436:	f5 0b       	sbc	r31, r21

00001438 <__udivmodsi4_ep>:
    1438:	66 1f       	adc	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	88 1f       	adc	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	1a 94       	dec	r1
    1442:	69 f7       	brne	.-38     	; 0x141e <__udivmodsi4_loop>
    1444:	60 95       	com	r22
    1446:	70 95       	com	r23
    1448:	80 95       	com	r24
    144a:	90 95       	com	r25
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	bd 01       	movw	r22, r26
    1452:	cf 01       	movw	r24, r30
    1454:	08 95       	ret

00001456 <__muluhisi3>:
    1456:	0e 94 36 0a 	call	0x146c	; 0x146c <__umulhisi3>
    145a:	a5 9f       	mul	r26, r21
    145c:	90 0d       	add	r25, r0
    145e:	b4 9f       	mul	r27, r20
    1460:	90 0d       	add	r25, r0
    1462:	a4 9f       	mul	r26, r20
    1464:	80 0d       	add	r24, r0
    1466:	91 1d       	adc	r25, r1
    1468:	11 24       	eor	r1, r1
    146a:	08 95       	ret

0000146c <__umulhisi3>:
    146c:	a2 9f       	mul	r26, r18
    146e:	b0 01       	movw	r22, r0
    1470:	b3 9f       	mul	r27, r19
    1472:	c0 01       	movw	r24, r0
    1474:	a3 9f       	mul	r26, r19
    1476:	70 0d       	add	r23, r0
    1478:	81 1d       	adc	r24, r1
    147a:	11 24       	eor	r1, r1
    147c:	91 1d       	adc	r25, r1
    147e:	b2 9f       	mul	r27, r18
    1480:	70 0d       	add	r23, r0
    1482:	81 1d       	adc	r24, r1
    1484:	11 24       	eor	r1, r1
    1486:	91 1d       	adc	r25, r1
    1488:	08 95       	ret

0000148a <_exit>:
    148a:	f8 94       	cli

0000148c <__stop_program>:
    148c:	ff cf       	rjmp	.-2      	; 0x148c <__stop_program>
